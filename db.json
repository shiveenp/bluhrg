{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/about/SE Levels.jpg","path":"about/SE Levels.jpg","modified":1,"renderable":0},{"_id":"themes/cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/android.png","path":"images/android.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/apple.png","path":"images/apple.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/images/home_logo.png","path":"images/home_logo.png","modified":1,"renderable":1},{"_id":"themes/cactus/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"source/resume/Resume.pdf","path":"resume/Resume.pdf","modified":1,"renderable":0},{"_id":"themes/cactus/source/lib/Roboto/LICENSE.txt","path":"lib/Roboto/LICENSE.txt","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","path":"lib/vazir-font/Vazir.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","path":"lib/vazir-font/Vazir.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":1,"renderable":1},{"_id":"source/about/about_me.jpg","path":"about/about_me.jpg","modified":1,"renderable":0},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","path":"lib/vazir-font/Vazir.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","path":"lib/vazir-font/Vazir.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/Roboto/Roboto-BoldItalic.ttf","path":"lib/Roboto/Roboto-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/Roboto/Roboto-LightItalic.ttf","path":"lib/Roboto/Roboto-LightItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/Roboto/Roboto-Light.ttf","path":"lib/Roboto/Roboto-Light.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/Roboto/Roboto-Black.ttf","path":"lib/Roboto/Roboto-Black.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/Roboto/Roboto-Medium.ttf","path":"lib/Roboto/Roboto-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/Roboto/Roboto-MediumItalic.ttf","path":"lib/Roboto/Roboto-MediumItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/Roboto/Roboto-Regular.ttf","path":"lib/Roboto/Roboto-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","path":"lib/font-awesome/webfonts/fa-regular-400.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","path":"lib/font-awesome/webfonts/fa-regular-400.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/Roboto/Roboto-RegularItalic.ttf","path":"lib/Roboto/Roboto-RegularItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/Roboto/Roboto-Thin.ttf","path":"lib/Roboto/Roboto-Thin.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/Roboto/Roboto-ThinItalic.ttf","path":"lib/Roboto/Roboto-ThinItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/Roboto/Roboto-Bold.ttf","path":"lib/Roboto/Roboto-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","path":"lib/font-awesome/webfonts/fa-brands-400.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/Roboto/Roboto-BlackItalic.ttf","path":"lib/Roboto/Roboto-BlackItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","path":"lib/font-awesome/webfonts/fa-solid-900.woff","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","path":"lib/font-awesome/webfonts/fa-brands-400.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","path":"lib/font-awesome/webfonts/fa-regular-400.svg","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","path":"lib/font-awesome/webfonts/fa-solid-900.eot","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","path":"lib/font-awesome/webfonts/fa-brands-400.svg","modified":1,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","path":"lib/font-awesome/webfonts/fa-solid-900.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/cactus/.gitignore","hash":"c5345a2c5fa6c136dbe2020a405e541b4755a259","modified":1566803052896},{"_id":"themes/cactus/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1566803052896},{"_id":"themes/cactus/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1566803052896},{"_id":"themes/cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1566803052897},{"_id":"themes/cactus/gulpfile.js","hash":"2bae290993507026a509665ee5a5326b616f8d68","modified":1566803052897},{"_id":"source/.DS_Store","hash":"949c2a8f8c4344904e249bf3ecb95355b1c14c7a","modified":1568982382418},{"_id":"themes/cactus/_config.yml","hash":"c4c55c01900a1a47b0568a1a4ba97e8259526467","modified":1576669313864},{"_id":"themes/cactus/package.json","hash":"5bbdbc429e9d46acf97baf7ac5654edde0781064","modified":1566803052904},{"_id":"source/_posts/Simple-Oembed-Service-Using-Http4k-Framework.md","hash":"130351970fb61836c1e27609aba6e3d9345e31f2","modified":1566803052877},{"_id":"source/_posts/Post-Boot-Actions-Using-Application-Events.md","hash":"6279d1d1698737f1f032b0a9e0ab0abb37879659","modified":1566803052876},{"_id":"source/_posts/hello-world.md","hash":"d345a9e146af94c29dcf6e2bb00c0c5aaa685e05","modified":1566803052877},{"_id":"source/_posts/Sending-Multipart-Form-Data-Using-Spring-WebTestClient-md.md","hash":"eecbbaada988373c22aa1487b2bf85938c573461","modified":1566803052877},{"_id":"source/_posts/S3-Browser-With-Kweb.md","hash":"a608632349bacf7535a02d494ea9da19867a6e9e","modified":1576669313848},{"_id":"source/reading/index.md","hash":"69fca0439d82b3fa80610a8fb99e04bab43c4a05","modified":1569122415489},{"_id":"source/about/index.md","hash":"3d5d36dae78fbfa681d8c2e0433588e03b4ea0bb","modified":1578186749990},{"_id":"source/resume/index.md","hash":"3f5e456ca6a7a1158a0ed4d96243ee924186f306","modified":1578116652248},{"_id":"source/about/SE Levels.jpg","hash":"4894617c51875473830281d9090ac723ab268ae7","modified":1578186611120},{"_id":"source/search/index.md","hash":"efca7f7592e94ba5ae5d83b395bca72ae471ab22","modified":1566803052896},{"_id":"themes/cactus/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1566803052897},{"_id":"themes/cactus/languages/default.yml","hash":"ea91a271db1a49386f97955ed72b2a668e2aea5e","modified":1566803052898},{"_id":"themes/cactus/languages/en.yml","hash":"ea91a271db1a49386f97955ed72b2a668e2aea5e","modified":1566803052898},{"_id":"themes/cactus/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1566803052898},{"_id":"themes/cactus/languages/fr.yml","hash":"4fea266d3c522903f3eee4fffee6e66c44775005","modified":1566803052898},{"_id":"themes/cactus/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1566803052898},{"_id":"themes/cactus/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1566803052898},{"_id":"themes/cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1566803052899},{"_id":"themes/cactus/languages/pl.yml","hash":"8a2d6dc874d86c38d42c2c861c39590647b5d536","modified":1566803052899},{"_id":"themes/cactus/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1566803052899},{"_id":"themes/cactus/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1566803052899},{"_id":"themes/cactus/languages/vi.yml","hash":"f84893c3ec3e45875c90069e14b17ed3016ed973","modified":1566803052900},{"_id":"themes/cactus/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1566803052899},{"_id":"themes/cactus/languages/zh-TW.yml","hash":"2f4e050c9b35a67f4a7278cec3a949533c2ac16a","modified":1566803052900},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"ca5582329d9721d58fe8504725108769080e9993","modified":1566803052900},{"_id":"themes/cactus/layout/archive.ejs","hash":"53de8817e37be01b3ba8fa5ca31b9cafa2f3c011","modified":1566803052903},{"_id":"themes/cactus/layout/index.ejs","hash":"c53484094a7c30ab82b0ea984404157ab9711e71","modified":1566803052904},{"_id":"themes/cactus/layout/layout.ejs","hash":"8504004f2ed78914f806c6699d9bd722318cbe56","modified":1566803052904},{"_id":"themes/cactus/layout/page.ejs","hash":"c5465d5315a7544aa466b01fd8cfb62917a8bb1d","modified":1566803052904},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1566803052905},{"_id":"themes/cactus/layout/post.ejs","hash":"739c7358ebb91e8f98196e08ece369b322afecde","modified":1566803052904},{"_id":"themes/cactus/scripts/meta.js","hash":"fa6055a39851c9953d033e70c1614547b94dce60","modified":1566803052905},{"_id":"themes/cactus/scripts/page_title.js","hash":"fa662dbdb82779af1b95e35ed7ccdf4866a53dee","modified":1566803052905},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1566803052905},{"_id":"source/_posts/junior-vs-mid-vs-senior-software-engineer/SE Levels.jpg","hash":"4894617c51875473830281d9090ac723ab268ae7","modified":1578186611120},{"_id":"source/_posts/Junior-vs-Mid-vs-Senior-Software-Engineer.md","hash":"30fe95c5252690d65dfbd69d2e46f70610ef5ac2","modified":1578186652663},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"4cf8d0059e5f8bc8ae1dd1a426293583fd398052","modified":1566803052900},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"994b63dbb63176108c514f93a52af27efde0269e","modified":1566803052901},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"753dcb513c6f21f6f46e673942c7261cf50da886","modified":1566803052901},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"9b2b7d6e9ab514107adf408c7ec8530fd612b3d5","modified":1566803052901},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1566803052901},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"78e3e290ab8bb6450a04b2a9c7c5b7b3da74abb8","modified":1566803052903},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1566803052903},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"be1b54388eb02176dd4722285dda19e3dce2e62e","modified":1566803052903},{"_id":"themes/cactus/source/css/_extend.styl","hash":"2c8751d132e62f5f068dc3a184d160670737ba1f","modified":1566803052906},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1566803052906},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1566803052918},{"_id":"themes/cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1566803052921},{"_id":"themes/cactus/source/css/_variables.styl","hash":"02079fb71b7d1c01d15fa512a1948ad4cbb416b5","modified":1566803052921},{"_id":"themes/cactus/source/css/rtl.styl","hash":"98355abe9ef3a398a5b4cb40d3d33bf86ac8d1d4","modified":1566803052921},{"_id":"themes/cactus/source/images/favicon.ico","hash":"f99db0dc1530c70a10bc95a26426d36372f8d125","modified":1566803052922},{"_id":"themes/cactus/source/images/android.png","hash":"fa05657ce2f14cfb07214760b26f86d754676920","modified":1566803052922},{"_id":"themes/cactus/source/css/style.styl","hash":"d9be82f7e7145cde78e04183afc8ff13d6a16059","modified":1566803052921},{"_id":"themes/cactus/source/images/apple.png","hash":"b69d8c60bf930471997113df0c01ed5c2124cc20","modified":1566803052922},{"_id":"themes/cactus/source/images/home_logo.png","hash":"224acf6100b3145cf26c7412d38645186b8d1648","modified":1566803052923},{"_id":"themes/cactus/source/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1566803052923},{"_id":"themes/cactus/source/js/search.js","hash":"a74d0c601f820160825a2e4ad13618074d714933","modified":1566803052923},{"_id":"source/resume/Resume.pdf","hash":"78b0050bfdb3d18cc4a503fb00f1d5639f672b99","modified":1576669313853},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"38aadd1ed890303dde582b722486138afee09b0a","modified":1566803052901},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"79b234ff3c264e66b2e71c819228e62bf92b48e4","modified":1566803052902},{"_id":"themes/cactus/layout/_partial/post/category.ejs","hash":"b5bfa049f17868fb09d9d2a7e1d5279fa0381d37","modified":1566803052902},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"6f2d1aa9562df343b797d25705f1945323c465fb","modified":1566803052902},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1566803052902},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"847a400e79b775246ca9067e40c3f104d571413d","modified":1566803052902},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"e08fae30da060f49c087f6c121868b08eb55c795","modified":1566803052903},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1566803052903},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"0f0ec41a4165814ce69688425d5ac4d701b7cc70","modified":1566803052906},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"d09f781cb02394850737b3a9efc6693307d5bf09","modified":1566803052906},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"e02b075bec15e560a9c471658551dd473f7ca0a7","modified":1568982001800},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1566803052907},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1566803052907},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1566803052907},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1566803052907},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"2b25ad24573bded8b42f9d80112eab9fadbed1a5","modified":1566803052906},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1566803052907},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1566803052908},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1566803052908},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1566803052908},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1566803052908},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1566803052908},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1566803052909},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1566803052909},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1566803052909},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1566803052909},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1566803052909},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1566803052909},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1566803052910},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1566803052910},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1566803052910},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1566803052910},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1566803052910},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1566803052910},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1566803052911},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1566803052911},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1566803052911},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1566803052912},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1566803052911},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1566803052912},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1566803052912},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1566803052912},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1566803052912},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1566803052911},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1566803052913},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1566803052913},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1566803052913},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1566803052913},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1566803052913},{"_id":"themes/cactus/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1566803052913},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1566803052914},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1566803052914},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1566803052913},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1566803052914},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1566803052914},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1566803052914},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1566803052914},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1566803052914},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1566803052914},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1566803052915},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1566803052915},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1566803052915},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1566803052915},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1566803052915},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1566803052915},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1566803052915},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1566803052915},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1566803052916},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1566803052916},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1566803052916},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1566803052916},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1566803052916},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1566803052916},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1566803052917},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1566803052917},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1566803052917},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1566803052917},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1566803052917},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1566803052917},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1566803052918},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1566803052918},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1566803052918},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1566803052918},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1566803052918},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1566803052918},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"7ff5b6a28dc3f2cd4ebfc4f5351054a18800bf96","modified":1566803052919},{"_id":"themes/cactus/source/css/_partial/categories.styl","hash":"a43f00e61b3507f130b8a3f8108a4eeca147c2a0","modified":1566803052919},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1566803052919},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"ef8fc52337c4c7b010cad7c427cb78009b30f9d8","modified":1566803052919},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"d9b13e402808175dc90761cc4fdfe3d4808034f8","modified":1566803052919},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"662667942cc9a2caf55caa84a0fc73617d0c3aa4","modified":1566803052919},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1566803052920},{"_id":"themes/cactus/source/css/_partial/tags.styl","hash":"d571d5c7c960300d29c5f0ec3fe1140322ecd6b3","modified":1566803052921},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1566803052920},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1566803052920},{"_id":"themes/cactus/source/lib/Roboto/LICENSE.txt","hash":"2b8b815229aa8a61e483fb4ba0588b8b6c491890","modified":1568982001803},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"0a257c8b60e0f20802c1dc8daeed2d3cb0d44f17","modified":1566803052966},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"37443d0040f0d7af381c955e4c15919a15d0349e","modified":1566803052966},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"62447a951d48b21c4696ae72df4bc4adef636e26","modified":1566803052969},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"df15fd1e74b6f4a50bea57e2b44d9627f38495b5","modified":1566803052969},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"32ae5c0d1d5943c8bb8e0f6ab07c3269c6f8b8a8","modified":1566803052971},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"ef07a250766fea840c1049e67c0405d9216ee0a8","modified":1566803052972},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"668400ae92700965f03f2371faaee0ab8c8347c3","modified":1566803052974},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"f5653059b2a5929516e4aab02329a978600b9b67","modified":1566803052974},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"ad4d46a99a1daf6353c86c79ac3a2b030213859c","modified":1566803052977},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"c3be79b553ec394db71268d604b1d29183b867dc","modified":1566803052977},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","hash":"bbee70033f0f5882e9869e417b69c6a38f56f187","modified":1566803052979},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","hash":"30ce165216db078951a690a6ad665b9b78f5dd81","modified":1566803052979},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"8f2bf6b59ae1f2ed4c2fead6cea4b8314fcf62e5","modified":1566803052979},{"_id":"source/about/about_me.jpg","hash":"c74a7306aa6c69529582312570295abbc029dc95","modified":1568982001783},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1566803052942},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"13d026ff857c853cbd0dc519b6e58669db309441","modified":1566803052965},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"594dc3344ad14903c247615427d1009709f0f5a4","modified":1566803052966},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"f76ec625e15522ff60d21f7a9a3b71c65bc27556","modified":1566803052967},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"2e6c9df9f775373fb1988ae8529aa8f05313dae6","modified":1566803052968},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"3edffd7bb61eee8cd46b57225f9f9e5264e3362b","modified":1566803052970},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"9f1e2934098a6a4a7c5584c8f3fa24a707070da3","modified":1566803052971},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"1f5a73db7947ef22c8a2bb19d6449b80496c03c4","modified":1566803052973},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"295f7e02c9b157e7ea63ad09613b00ceab85c5cd","modified":1566803052974},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"08e1503d1181188690fd9c81860d6c890c1465f6","modified":1566803052975},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"a6aa450ee6e0f85786474ca6b04827ef97e81af4","modified":1566803052976},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","hash":"31a9219c25fe1991fb745ec8dbbcf45c6094a702","modified":1566803052978},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","hash":"f22b219824026e490a581ddb3b36b07997dff0e3","modified":1566803052978},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"4ef72ea70f7c840b2843bf7717aaafae3b6fc241","modified":1566803052920},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1566803052920},{"_id":"themes/cactus/source/lib/Roboto/Roboto-BoldItalic.ttf","hash":"60b9860b7fc93d6b0b322f170634105bc6a8cc8d","modified":1568982001813},{"_id":"themes/cactus/source/lib/Roboto/Roboto-LightItalic.ttf","hash":"a0440f60a96a59c4105c3eb639cb2573826f84fe","modified":1568982001817},{"_id":"themes/cactus/source/lib/Roboto/Roboto-Light.ttf","hash":"92cc3b6f9440193c12fd02ed690e434d685a9cc8","modified":1568982001815},{"_id":"themes/cactus/source/lib/Roboto/Roboto-Black.ttf","hash":"ee52f7cf8e54f3ee2afbc474a352d5c19514d9c1","modified":1568982001806},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"cf1a3fd771900af34f2af22142beecfb47367548","modified":1566803052924},{"_id":"themes/cactus/source/lib/Roboto/Roboto-Medium.ttf","hash":"f6783010d5def128c4a1539333324f75701d9bab","modified":1568982001819},{"_id":"themes/cactus/source/lib/Roboto/Roboto-MediumItalic.ttf","hash":"e4e31e55d279a9b12c32327a60a3a65c8350e5df","modified":1568982001821},{"_id":"themes/cactus/source/lib/Roboto/Roboto-Regular.ttf","hash":"096c9245b6a192d1403a82848e104a65f578a8ec","modified":1568982001823},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"d902f8db3e021155f177f698a252fb98d6e61768","modified":1566803052931},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"42ff503f20e97503cef8e5b2ec10ae07699d7c01","modified":1566803052932},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"7b3f44b4d3028f3c87ddf0f4bd62511c9bf4a87e","modified":1566803052934},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"9784edb76f8a2ed595ea4bf74d46cda4eff3b303","modified":1566803052934},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"c140085833a38abec6b7df99d4ccac93eb266031","modified":1566803052933},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1566803052943},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1566803052943},{"_id":"themes/cactus/source/lib/Roboto/Roboto-RegularItalic.ttf","hash":"dc6756127707ab2d6e388a6023087351fa41999c","modified":1568982001825},{"_id":"themes/cactus/source/lib/Roboto/Roboto-Thin.ttf","hash":"711e666e7f52210ac487c7ed81a0ac68a2b52261","modified":1568982001827},{"_id":"themes/cactus/source/lib/Roboto/Roboto-ThinItalic.ttf","hash":"75ffde032d49005faa643338eda97c311ad7d316","modified":1568982001829},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"92da6e3c7121e21cdfde25ef08797a3937a683e1","modified":1566803052942},{"_id":"themes/cactus/source/lib/Roboto/Roboto-Bold.ttf","hash":"3dd713113ff2d79b94d2df343e2e28fa8e7279cf","modified":1568982001811},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"f9d835a0f9248b1bb33d66968e87c4a50103ed8d","modified":1566803052931},{"_id":"themes/cactus/source/lib/Roboto/Roboto-BlackItalic.ttf","hash":"94ba47a5510d3e21ae4db0da0425b855686de586","modified":1568982001809},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"80d33a73cbb60e206ef6f5c898988641576c7dda","modified":1566803052941},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"19e302760e39e25a5f8d90d6cd0164ef6cd74f8c","modified":1566803052930},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"644ece8263d2f96b087eebf7f6d4e309e5898eb5","modified":1566803052925},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"33e86c0ad6fb9c5c0c8c2af4cb2d790c6b14a8aa","modified":1566803052933},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"10740942ec6b3f4985529d343402d0bf32f9f847","modified":1566803052935},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"c445864a9646948e0d7ff44930ad732ee61427d8","modified":1566803052941},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1566803052954},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1566803052959},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1566803052951},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1566803052957},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1566803052963},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1566803052962},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1566803052955},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1566803052956},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1566803052961},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1566803052961},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1566803052964},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1566803052949},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"b0bb9e6ac7709206b9510f1718516d89aead5b21","modified":1566803052929},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"ed6c1ed8f24df909f40fe5e5c652d7ff9570c821","modified":1566803052939}],"Category":[{"name":"showcase","_id":"ck50cg3ta0002a4ef2zk29luc"},{"name":"tutorial","_id":"ck50cg3tc0004a4ef18t4d7d7"}],"Data":[],"Page":[{"title":"Reading","date":"2019-04-30T12:09:20.000Z","_content":"\nCurrently Reading 📖\n\n- [The Intelligent Investor by Benjamin Graham](https://www.goodreads.com/book/show/106835.The_Intelligent_Investor)\n\nPast Reads 📚\n\n- [Sapiens: A Brief History of Humankind by Yuval Noah Harari](https://www.goodreads.com/book/show/23692271-sapiens)\n\n    A fairly popular book, recommended by a few of my friends by the time I got around to reading it. Thoroughly enjoyed it and Yuval has an uncanny ability to make the most boring history lessons sound like going on an adventure. A word of advice on the title however, I went into it think it was a history book, but it's more of a discourse on human sociology and inherent biological and environmental changes that shaped it through the years.\n\n- [The Order of Time by Carlo Rovelli](https://www.goodreads.com/book/show/36500398-the-order-of-time?from_choice=false&from_home_module=false&rating=3)\n\n    Although started a bit slow, and I think I expected it to be some kind of revelations book but having done both quantum physics and some post university level physics - I was slightly disappointed since it seemed like it was just an explain like I'm 5 version of higher order physics. However, the prose was very enjoyable and it was good to finally understand some more obscure concepts in a lot more detail thanks to the writing prowess of the author.\n\n- [The Spin by Robert Charles Wilson](https://www.goodreads.com/book/show/910863.Spin)\n  \n  Thoroughly enjoyed this book - had an interesting take on what it means to be a sentient species in the grand scheme of the universe.\n\n- [Designing Data Intensive Applications by Martin Kleppmann](https://www.goodreads.com/book/show/23463279-designing-data-intensive-applications)\n\n  I'm not usually a fan of big technical tomes, but this was a very informative and good read. The key takeaway wasn't any new concepts, though there were a few of those, but they way it was presented and the absolutely perfect writing and research.\n","source":"reading/index.md","raw":"---\ntitle: Reading\ndate: 2019-04-30 22:09:20\n---\n\nCurrently Reading 📖\n\n- [The Intelligent Investor by Benjamin Graham](https://www.goodreads.com/book/show/106835.The_Intelligent_Investor)\n\nPast Reads 📚\n\n- [Sapiens: A Brief History of Humankind by Yuval Noah Harari](https://www.goodreads.com/book/show/23692271-sapiens)\n\n    A fairly popular book, recommended by a few of my friends by the time I got around to reading it. Thoroughly enjoyed it and Yuval has an uncanny ability to make the most boring history lessons sound like going on an adventure. A word of advice on the title however, I went into it think it was a history book, but it's more of a discourse on human sociology and inherent biological and environmental changes that shaped it through the years.\n\n- [The Order of Time by Carlo Rovelli](https://www.goodreads.com/book/show/36500398-the-order-of-time?from_choice=false&from_home_module=false&rating=3)\n\n    Although started a bit slow, and I think I expected it to be some kind of revelations book but having done both quantum physics and some post university level physics - I was slightly disappointed since it seemed like it was just an explain like I'm 5 version of higher order physics. However, the prose was very enjoyable and it was good to finally understand some more obscure concepts in a lot more detail thanks to the writing prowess of the author.\n\n- [The Spin by Robert Charles Wilson](https://www.goodreads.com/book/show/910863.Spin)\n  \n  Thoroughly enjoyed this book - had an interesting take on what it means to be a sentient species in the grand scheme of the universe.\n\n- [Designing Data Intensive Applications by Martin Kleppmann](https://www.goodreads.com/book/show/23463279-designing-data-intensive-applications)\n\n  I'm not usually a fan of big technical tomes, but this was a very informative and good read. The key takeaway wasn't any new concepts, though there were a few of those, but they way it was presented and the absolutely perfect writing and research.\n","updated":"2019-09-22T03:20:15.489Z","path":"reading/index.html","comments":1,"layout":"page","_id":"ck50cg3u5000ha4efh95c9mvc","content":"<p>Currently Reading 📖</p>\n<ul>\n<li><a href=\"https://www.goodreads.com/book/show/106835.The_Intelligent_Investor\" target=\"_blank\" rel=\"noopener\">The Intelligent Investor by Benjamin Graham</a></li>\n</ul>\n<p>Past Reads 📚</p>\n<ul>\n<li><p><a href=\"https://www.goodreads.com/book/show/23692271-sapiens\" target=\"_blank\" rel=\"noopener\">Sapiens: A Brief History of Humankind by Yuval Noah Harari</a></p>\n<p>  A fairly popular book, recommended by a few of my friends by the time I got around to reading it. Thoroughly enjoyed it and Yuval has an uncanny ability to make the most boring history lessons sound like going on an adventure. A word of advice on the title however, I went into it think it was a history book, but it’s more of a discourse on human sociology and inherent biological and environmental changes that shaped it through the years.</p>\n</li>\n<li><p><a href=\"https://www.goodreads.com/book/show/36500398-the-order-of-time?from_choice=false&amp;from_home_module=false&amp;rating=3\" target=\"_blank\" rel=\"noopener\">The Order of Time by Carlo Rovelli</a></p>\n<p>  Although started a bit slow, and I think I expected it to be some kind of revelations book but having done both quantum physics and some post university level physics - I was slightly disappointed since it seemed like it was just an explain like I’m 5 version of higher order physics. However, the prose was very enjoyable and it was good to finally understand some more obscure concepts in a lot more detail thanks to the writing prowess of the author.</p>\n</li>\n<li><p><a href=\"https://www.goodreads.com/book/show/910863.Spin\" target=\"_blank\" rel=\"noopener\">The Spin by Robert Charles Wilson</a></p>\n<p>Thoroughly enjoyed this book - had an interesting take on what it means to be a sentient species in the grand scheme of the universe.</p>\n</li>\n<li><p><a href=\"https://www.goodreads.com/book/show/23463279-designing-data-intensive-applications\" target=\"_blank\" rel=\"noopener\">Designing Data Intensive Applications by Martin Kleppmann</a></p>\n<p>I’m not usually a fan of big technical tomes, but this was a very informative and good read. The key takeaway wasn’t any new concepts, though there were a few of those, but they way it was presented and the absolutely perfect writing and research.</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Currently Reading 📖</p>\n<ul>\n<li><a href=\"https://www.goodreads.com/book/show/106835.The_Intelligent_Investor\" target=\"_blank\" rel=\"noopener\">The Intelligent Investor by Benjamin Graham</a></li>\n</ul>\n<p>Past Reads 📚</p>\n<ul>\n<li><p><a href=\"https://www.goodreads.com/book/show/23692271-sapiens\" target=\"_blank\" rel=\"noopener\">Sapiens: A Brief History of Humankind by Yuval Noah Harari</a></p>\n<p>  A fairly popular book, recommended by a few of my friends by the time I got around to reading it. Thoroughly enjoyed it and Yuval has an uncanny ability to make the most boring history lessons sound like going on an adventure. A word of advice on the title however, I went into it think it was a history book, but it’s more of a discourse on human sociology and inherent biological and environmental changes that shaped it through the years.</p>\n</li>\n<li><p><a href=\"https://www.goodreads.com/book/show/36500398-the-order-of-time?from_choice=false&amp;from_home_module=false&amp;rating=3\" target=\"_blank\" rel=\"noopener\">The Order of Time by Carlo Rovelli</a></p>\n<p>  Although started a bit slow, and I think I expected it to be some kind of revelations book but having done both quantum physics and some post university level physics - I was slightly disappointed since it seemed like it was just an explain like I’m 5 version of higher order physics. However, the prose was very enjoyable and it was good to finally understand some more obscure concepts in a lot more detail thanks to the writing prowess of the author.</p>\n</li>\n<li><p><a href=\"https://www.goodreads.com/book/show/910863.Spin\" target=\"_blank\" rel=\"noopener\">The Spin by Robert Charles Wilson</a></p>\n<p>Thoroughly enjoyed this book - had an interesting take on what it means to be a sentient species in the grand scheme of the universe.</p>\n</li>\n<li><p><a href=\"https://www.goodreads.com/book/show/23463279-designing-data-intensive-applications\" target=\"_blank\" rel=\"noopener\">Designing Data Intensive Applications by Martin Kleppmann</a></p>\n<p>I’m not usually a fan of big technical tomes, but this was a very informative and good read. The key takeaway wasn’t any new concepts, though there were a few of those, but they way it was presented and the absolutely perfect writing and research.</p>\n</li>\n</ul>\n"},{"title":"about","date":"2019-04-07T02:32:56.000Z","_content":"Hi! My name is Shiveen 👋🏽 🤓\n\nI like building software and products for companies that are making a difference. I have previously worked in finance @ [JPMorgan](https://www.jpmorgan.com/) and lead the platform team for a large scale orders and payments system @ [Ordermentum](https://www.ordermentum.com/). Currently, working on making the retirement lives of average australian better by making [superannuation](https://en.wikipedia.org/wiki/Superannuation_in_Australia) efficient @ [Grow Super](https://www.growsuper.com/).\n\nGrowing up, I've always been fascinated with how the world works, and the ability to write software as living allows me to explore all the creative possibilities I can think of to make someone's life better.\n\nMy current software development interest lies in Kotlin as a general purpose programming language to build scalable systrems along with providing performance glue using Rust and building responsive front end systems using VueJs and Node.\n\nIn my spare time I love catching up on all things' astronomy 🌌 🚀, history and investment podcasts, and am an avid reader with my favourite genres being hard science fiction, psychology and autobiographical novels. More on my reading [here](/reading).\n\nOutside of my programming pursuits, I am also passionate about camping 🏕, hiking 🥾, landscape photography ⛰ 📷  — and boxing 🥊. \n\n![](./SE%20Levels.jpg)\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-04-07 12:32:56\n---\nHi! My name is Shiveen 👋🏽 🤓\n\nI like building software and products for companies that are making a difference. I have previously worked in finance @ [JPMorgan](https://www.jpmorgan.com/) and lead the platform team for a large scale orders and payments system @ [Ordermentum](https://www.ordermentum.com/). Currently, working on making the retirement lives of average australian better by making [superannuation](https://en.wikipedia.org/wiki/Superannuation_in_Australia) efficient @ [Grow Super](https://www.growsuper.com/).\n\nGrowing up, I've always been fascinated with how the world works, and the ability to write software as living allows me to explore all the creative possibilities I can think of to make someone's life better.\n\nMy current software development interest lies in Kotlin as a general purpose programming language to build scalable systrems along with providing performance glue using Rust and building responsive front end systems using VueJs and Node.\n\nIn my spare time I love catching up on all things' astronomy 🌌 🚀, history and investment podcasts, and am an avid reader with my favourite genres being hard science fiction, psychology and autobiographical novels. More on my reading [here](/reading).\n\nOutside of my programming pursuits, I am also passionate about camping 🏕, hiking 🥾, landscape photography ⛰ 📷  — and boxing 🥊. \n\n![](./SE%20Levels.jpg)\n","updated":"2020-01-05T01:12:29.990Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck50cg3u7000ja4ef31wlzifh","content":"<p>Hi! My name is Shiveen 👋🏽 🤓</p>\n<p>I like building software and products for companies that are making a difference. I have previously worked in finance @ <a href=\"https://www.jpmorgan.com/\" target=\"_blank\" rel=\"noopener\">JPMorgan</a> and lead the platform team for a large scale orders and payments system @ <a href=\"https://www.ordermentum.com/\" target=\"_blank\" rel=\"noopener\">Ordermentum</a>. Currently, working on making the retirement lives of average australian better by making <a href=\"https://en.wikipedia.org/wiki/Superannuation_in_Australia\" target=\"_blank\" rel=\"noopener\">superannuation</a> efficient @ <a href=\"https://www.growsuper.com/\" target=\"_blank\" rel=\"noopener\">Grow Super</a>.</p>\n<p>Growing up, I’ve always been fascinated with how the world works, and the ability to write software as living allows me to explore all the creative possibilities I can think of to make someone’s life better.</p>\n<p>My current software development interest lies in Kotlin as a general purpose programming language to build scalable systrems along with providing performance glue using Rust and building responsive front end systems using VueJs and Node.</p>\n<p>In my spare time I love catching up on all things’ astronomy 🌌 🚀, history and investment podcasts, and am an avid reader with my favourite genres being hard science fiction, psychology and autobiographical novels. More on my reading <a href=\"/reading\">here</a>.</p>\n<p>Outside of my programming pursuits, I am also passionate about camping 🏕, hiking 🥾, landscape photography ⛰ 📷  — and boxing 🥊. </p>\n<p><img src=\"./SE%20Levels.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Hi! My name is Shiveen 👋🏽 🤓</p>\n<p>I like building software and products for companies that are making a difference. I have previously worked in finance @ <a href=\"https://www.jpmorgan.com/\" target=\"_blank\" rel=\"noopener\">JPMorgan</a> and lead the platform team for a large scale orders and payments system @ <a href=\"https://www.ordermentum.com/\" target=\"_blank\" rel=\"noopener\">Ordermentum</a>. Currently, working on making the retirement lives of average australian better by making <a href=\"https://en.wikipedia.org/wiki/Superannuation_in_Australia\" target=\"_blank\" rel=\"noopener\">superannuation</a> efficient @ <a href=\"https://www.growsuper.com/\" target=\"_blank\" rel=\"noopener\">Grow Super</a>.</p>\n<p>Growing up, I’ve always been fascinated with how the world works, and the ability to write software as living allows me to explore all the creative possibilities I can think of to make someone’s life better.</p>\n<p>My current software development interest lies in Kotlin as a general purpose programming language to build scalable systrems along with providing performance glue using Rust and building responsive front end systems using VueJs and Node.</p>\n<p>In my spare time I love catching up on all things’ astronomy 🌌 🚀, history and investment podcasts, and am an avid reader with my favourite genres being hard science fiction, psychology and autobiographical novels. More on my reading <a href=\"/reading\">here</a>.</p>\n<p>Outside of my programming pursuits, I am also passionate about camping 🏕, hiking 🥾, landscape photography ⛰ 📷  — and boxing 🥊. </p>\n<p><img src=\"./SE%20Levels.jpg\" alt></p>\n"},{"title":"Search","type":"search","date":"2019-04-07T02:30:10.000Z","_content":"","source":"search/index.md","raw":"---\ntitle: Search\ntype: search\ndate: 2019-04-07 12:30:10\n---\n","updated":"2019-08-26T07:04:12.896Z","path":"search/index.html","comments":1,"layout":"page","_id":"ck50cg3u9000ka4efcbhl2f21","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"resume","date":"2019-11-08T10:44:35.000Z","_content":"\n# Summary\n\nI lead development and product teams to succeed by setting up and evolving the development strategies that scale, as well as impact key business products and outcomes. \n\n# Experience\n\n## Grow Super - Solutions Architect\nDecember 2019 - Present\n\nAs part of this role, I am involved in gathering and digesting, business and user experience requirements to come up with system architecture for reliable, scalable and maintainable systems. This involves working with extremely complicated Australian and New Zealand super industry also adopting the best tools and architectures out there for data intensive applications.\n\nMy day to day role includes, but is not limited to:\n\n- Working closely with product owners and user experience designers to lay the roadmap for building new and existing services\n- Doing initial large impact MVP product build\n- Coaching and mentoring software engineers across all levels\n\n## Grow Super — Lead Software Engineer\nJuly 2019 — December 2019\n\nAs part of this role, I was involved in building out both green and brownfield projects from scratch and working closely with the product, design and external stakeholders to deliver the best technology outcomes for our end users.\n\n- Worked closely with CTO and product team to roll out the user security on our mothership distributed ledger application.\n- Designed and built the reporting infrastructure from grounds up using Kotlin, Springboot and Docker.\n- Provided uplift to the existing NodeJS applications by using better Javascript development practices.\n- Championed the use of modern development practices, proper service oriented architecture and TDD, including holding internal mentorship sessions with various team members.\n\n## Ordermentum — Senior Software Engineer/Platform Lead\nJune 2018 – July 2019 \n\nJoined the team as a senior engineer leading the technical design and delivering scalable and performant event-driven JVM based microservices for a team looking to move away from NodeJS monolith.\n\n- Led and owned the platform integration project, helping the system integrate with leading accounting and ERP solutions providers such as Oracle Netsuite, Microsoft Dynamics 365, Myob, Xero and Reckon etc.\n- Built and delivered the rewrite of the reporting engine, that enabled users to request on demand reports as well as dynamic scheduled reports which drove business delivery for key clients.\n- Created an open sourced [Rust] utility for calculating \n\n## JP Morgan - Associate Software Engineer\nDec 2016 - June 2018\n\nWorking in this role, I wore many hats and worked across various agile feature teams across the custody, fund management and risk lines of business. Some key deliverables and objectives that I worked on my time there included working on a fund management exception and reporting system, a risk reporting system and a several other smaller projects.\n\n- Worked closely with fund managers to build out an exception management system with backend in Java and frontend in AngularJS which was later migrated to Angular 4.\n- Worked alongside the DevOps and production support teams to deliver CI/CD value across the whole organisation and upgraded out production monitoring services.\n- Worked with teams across three timezones to upgrade a risk and compliance reporting system which delivered reports directly to trustees and investment managers.\n\n## Tools and Languages\n\nLanguages: Kotlin, Java, Rust, Javascript, Python\n\nBackend Frameworks: Spring, Vert.x, Http4k\n\nFrontend Frameworks: VueJS, React\n\nDatabase: Postgresql, Mongodb\n\nDevops: AWS, Kubernetes, Docker\n\nMethodologies: Agile\n\n\n\n\n","source":"resume/index.md","raw":"---\ntitle: resume\ndate: 2019-11-08 21:44:35\n---\n\n# Summary\n\nI lead development and product teams to succeed by setting up and evolving the development strategies that scale, as well as impact key business products and outcomes. \n\n# Experience\n\n## Grow Super - Solutions Architect\nDecember 2019 - Present\n\nAs part of this role, I am involved in gathering and digesting, business and user experience requirements to come up with system architecture for reliable, scalable and maintainable systems. This involves working with extremely complicated Australian and New Zealand super industry also adopting the best tools and architectures out there for data intensive applications.\n\nMy day to day role includes, but is not limited to:\n\n- Working closely with product owners and user experience designers to lay the roadmap for building new and existing services\n- Doing initial large impact MVP product build\n- Coaching and mentoring software engineers across all levels\n\n## Grow Super — Lead Software Engineer\nJuly 2019 — December 2019\n\nAs part of this role, I was involved in building out both green and brownfield projects from scratch and working closely with the product, design and external stakeholders to deliver the best technology outcomes for our end users.\n\n- Worked closely with CTO and product team to roll out the user security on our mothership distributed ledger application.\n- Designed and built the reporting infrastructure from grounds up using Kotlin, Springboot and Docker.\n- Provided uplift to the existing NodeJS applications by using better Javascript development practices.\n- Championed the use of modern development practices, proper service oriented architecture and TDD, including holding internal mentorship sessions with various team members.\n\n## Ordermentum — Senior Software Engineer/Platform Lead\nJune 2018 – July 2019 \n\nJoined the team as a senior engineer leading the technical design and delivering scalable and performant event-driven JVM based microservices for a team looking to move away from NodeJS monolith.\n\n- Led and owned the platform integration project, helping the system integrate with leading accounting and ERP solutions providers such as Oracle Netsuite, Microsoft Dynamics 365, Myob, Xero and Reckon etc.\n- Built and delivered the rewrite of the reporting engine, that enabled users to request on demand reports as well as dynamic scheduled reports which drove business delivery for key clients.\n- Created an open sourced [Rust] utility for calculating \n\n## JP Morgan - Associate Software Engineer\nDec 2016 - June 2018\n\nWorking in this role, I wore many hats and worked across various agile feature teams across the custody, fund management and risk lines of business. Some key deliverables and objectives that I worked on my time there included working on a fund management exception and reporting system, a risk reporting system and a several other smaller projects.\n\n- Worked closely with fund managers to build out an exception management system with backend in Java and frontend in AngularJS which was later migrated to Angular 4.\n- Worked alongside the DevOps and production support teams to deliver CI/CD value across the whole organisation and upgraded out production monitoring services.\n- Worked with teams across three timezones to upgrade a risk and compliance reporting system which delivered reports directly to trustees and investment managers.\n\n## Tools and Languages\n\nLanguages: Kotlin, Java, Rust, Javascript, Python\n\nBackend Frameworks: Spring, Vert.x, Http4k\n\nFrontend Frameworks: VueJS, React\n\nDatabase: Postgresql, Mongodb\n\nDevops: AWS, Kubernetes, Docker\n\nMethodologies: Agile\n\n\n\n\n","updated":"2020-01-04T05:44:12.248Z","path":"resume/index.html","comments":1,"layout":"page","_id":"ck50cg3ua000ma4efq83ws7ai","content":"<h1 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h1><p>I lead development and product teams to succeed by setting up and evolving the development strategies that scale, as well as impact key business products and outcomes. </p>\n<h1 id=\"Experience\"><a href=\"#Experience\" class=\"headerlink\" title=\"Experience\"></a>Experience</h1><h2 id=\"Grow-Super-Solutions-Architect\"><a href=\"#Grow-Super-Solutions-Architect\" class=\"headerlink\" title=\"Grow Super - Solutions Architect\"></a>Grow Super - Solutions Architect</h2><p>December 2019 - Present</p>\n<p>As part of this role, I am involved in gathering and digesting, business and user experience requirements to come up with system architecture for reliable, scalable and maintainable systems. This involves working with extremely complicated Australian and New Zealand super industry also adopting the best tools and architectures out there for data intensive applications.</p>\n<p>My day to day role includes, but is not limited to:</p>\n<ul>\n<li>Working closely with product owners and user experience designers to lay the roadmap for building new and existing services</li>\n<li>Doing initial large impact MVP product build</li>\n<li>Coaching and mentoring software engineers across all levels</li>\n</ul>\n<h2 id=\"Grow-Super-—-Lead-Software-Engineer\"><a href=\"#Grow-Super-—-Lead-Software-Engineer\" class=\"headerlink\" title=\"Grow Super — Lead Software Engineer\"></a>Grow Super — Lead Software Engineer</h2><p>July 2019 — December 2019</p>\n<p>As part of this role, I was involved in building out both green and brownfield projects from scratch and working closely with the product, design and external stakeholders to deliver the best technology outcomes for our end users.</p>\n<ul>\n<li>Worked closely with CTO and product team to roll out the user security on our mothership distributed ledger application.</li>\n<li>Designed and built the reporting infrastructure from grounds up using Kotlin, Springboot and Docker.</li>\n<li>Provided uplift to the existing NodeJS applications by using better Javascript development practices.</li>\n<li>Championed the use of modern development practices, proper service oriented architecture and TDD, including holding internal mentorship sessions with various team members.</li>\n</ul>\n<h2 id=\"Ordermentum-—-Senior-Software-Engineer-Platform-Lead\"><a href=\"#Ordermentum-—-Senior-Software-Engineer-Platform-Lead\" class=\"headerlink\" title=\"Ordermentum — Senior Software Engineer/Platform Lead\"></a>Ordermentum — Senior Software Engineer/Platform Lead</h2><p>June 2018 – July 2019 </p>\n<p>Joined the team as a senior engineer leading the technical design and delivering scalable and performant event-driven JVM based microservices for a team looking to move away from NodeJS monolith.</p>\n<ul>\n<li>Led and owned the platform integration project, helping the system integrate with leading accounting and ERP solutions providers such as Oracle Netsuite, Microsoft Dynamics 365, Myob, Xero and Reckon etc.</li>\n<li>Built and delivered the rewrite of the reporting engine, that enabled users to request on demand reports as well as dynamic scheduled reports which drove business delivery for key clients.</li>\n<li>Created an open sourced [Rust] utility for calculating </li>\n</ul>\n<h2 id=\"JP-Morgan-Associate-Software-Engineer\"><a href=\"#JP-Morgan-Associate-Software-Engineer\" class=\"headerlink\" title=\"JP Morgan - Associate Software Engineer\"></a>JP Morgan - Associate Software Engineer</h2><p>Dec 2016 - June 2018</p>\n<p>Working in this role, I wore many hats and worked across various agile feature teams across the custody, fund management and risk lines of business. Some key deliverables and objectives that I worked on my time there included working on a fund management exception and reporting system, a risk reporting system and a several other smaller projects.</p>\n<ul>\n<li>Worked closely with fund managers to build out an exception management system with backend in Java and frontend in AngularJS which was later migrated to Angular 4.</li>\n<li>Worked alongside the DevOps and production support teams to deliver CI/CD value across the whole organisation and upgraded out production monitoring services.</li>\n<li>Worked with teams across three timezones to upgrade a risk and compliance reporting system which delivered reports directly to trustees and investment managers.</li>\n</ul>\n<h2 id=\"Tools-and-Languages\"><a href=\"#Tools-and-Languages\" class=\"headerlink\" title=\"Tools and Languages\"></a>Tools and Languages</h2><p>Languages: Kotlin, Java, Rust, Javascript, Python</p>\n<p>Backend Frameworks: Spring, Vert.x, Http4k</p>\n<p>Frontend Frameworks: VueJS, React</p>\n<p>Database: Postgresql, Mongodb</p>\n<p>Devops: AWS, Kubernetes, Docker</p>\n<p>Methodologies: Agile</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h1><p>I lead development and product teams to succeed by setting up and evolving the development strategies that scale, as well as impact key business products and outcomes. </p>\n<h1 id=\"Experience\"><a href=\"#Experience\" class=\"headerlink\" title=\"Experience\"></a>Experience</h1><h2 id=\"Grow-Super-Solutions-Architect\"><a href=\"#Grow-Super-Solutions-Architect\" class=\"headerlink\" title=\"Grow Super - Solutions Architect\"></a>Grow Super - Solutions Architect</h2><p>December 2019 - Present</p>\n<p>As part of this role, I am involved in gathering and digesting, business and user experience requirements to come up with system architecture for reliable, scalable and maintainable systems. This involves working with extremely complicated Australian and New Zealand super industry also adopting the best tools and architectures out there for data intensive applications.</p>\n<p>My day to day role includes, but is not limited to:</p>\n<ul>\n<li>Working closely with product owners and user experience designers to lay the roadmap for building new and existing services</li>\n<li>Doing initial large impact MVP product build</li>\n<li>Coaching and mentoring software engineers across all levels</li>\n</ul>\n<h2 id=\"Grow-Super-—-Lead-Software-Engineer\"><a href=\"#Grow-Super-—-Lead-Software-Engineer\" class=\"headerlink\" title=\"Grow Super — Lead Software Engineer\"></a>Grow Super — Lead Software Engineer</h2><p>July 2019 — December 2019</p>\n<p>As part of this role, I was involved in building out both green and brownfield projects from scratch and working closely with the product, design and external stakeholders to deliver the best technology outcomes for our end users.</p>\n<ul>\n<li>Worked closely with CTO and product team to roll out the user security on our mothership distributed ledger application.</li>\n<li>Designed and built the reporting infrastructure from grounds up using Kotlin, Springboot and Docker.</li>\n<li>Provided uplift to the existing NodeJS applications by using better Javascript development practices.</li>\n<li>Championed the use of modern development practices, proper service oriented architecture and TDD, including holding internal mentorship sessions with various team members.</li>\n</ul>\n<h2 id=\"Ordermentum-—-Senior-Software-Engineer-Platform-Lead\"><a href=\"#Ordermentum-—-Senior-Software-Engineer-Platform-Lead\" class=\"headerlink\" title=\"Ordermentum — Senior Software Engineer/Platform Lead\"></a>Ordermentum — Senior Software Engineer/Platform Lead</h2><p>June 2018 – July 2019 </p>\n<p>Joined the team as a senior engineer leading the technical design and delivering scalable and performant event-driven JVM based microservices for a team looking to move away from NodeJS monolith.</p>\n<ul>\n<li>Led and owned the platform integration project, helping the system integrate with leading accounting and ERP solutions providers such as Oracle Netsuite, Microsoft Dynamics 365, Myob, Xero and Reckon etc.</li>\n<li>Built and delivered the rewrite of the reporting engine, that enabled users to request on demand reports as well as dynamic scheduled reports which drove business delivery for key clients.</li>\n<li>Created an open sourced [Rust] utility for calculating </li>\n</ul>\n<h2 id=\"JP-Morgan-Associate-Software-Engineer\"><a href=\"#JP-Morgan-Associate-Software-Engineer\" class=\"headerlink\" title=\"JP Morgan - Associate Software Engineer\"></a>JP Morgan - Associate Software Engineer</h2><p>Dec 2016 - June 2018</p>\n<p>Working in this role, I wore many hats and worked across various agile feature teams across the custody, fund management and risk lines of business. Some key deliverables and objectives that I worked on my time there included working on a fund management exception and reporting system, a risk reporting system and a several other smaller projects.</p>\n<ul>\n<li>Worked closely with fund managers to build out an exception management system with backend in Java and frontend in AngularJS which was later migrated to Angular 4.</li>\n<li>Worked alongside the DevOps and production support teams to deliver CI/CD value across the whole organisation and upgraded out production monitoring services.</li>\n<li>Worked with teams across three timezones to upgrade a risk and compliance reporting system which delivered reports directly to trustees and investment managers.</li>\n</ul>\n<h2 id=\"Tools-and-Languages\"><a href=\"#Tools-and-Languages\" class=\"headerlink\" title=\"Tools and Languages\"></a>Tools and Languages</h2><p>Languages: Kotlin, Java, Rust, Javascript, Python</p>\n<p>Backend Frameworks: Spring, Vert.x, Http4k</p>\n<p>Frontend Frameworks: VueJS, React</p>\n<p>Database: Postgresql, Mongodb</p>\n<p>Devops: AWS, Kubernetes, Docker</p>\n<p>Methodologies: Agile</p>\n"}],"Post":[{"title":"Simple Oembed Service Using Http4k Framework","date":"2019-03-18T00:27:06.000Z","_content":"\nRecently on my usual #githunt prowl I came across a new promising http library called [http4k](https://github.com/http4k/http4k/). The library is based on the philosophy of **Application as Function** based on the twitter paper [Your Server as a Function](https://monkey.org/~marius/funsrv.pdf) and promises a lightweight a server toolkit alongwith a very modular approach to adding functionality on top of the core set of capabilities built in. But the best part of all, http4k is written in pure Kotlin and follows a consistent functional approach in handling http services.\n\nNow, as much as a like the kitchen sink approach of Spring framework in getting an almost enterprise ready service running with a couple of tutorials and minimal effort , I really wanted to try my hands at something lighter and different. \n\n## Setting up a micro server with http4k\n\nHttp4k provides a simple yet highly configurable way to setup a microserver using nothing but just the core client and an underlying webserver of choosing. \n\nTo start off, create a new base gradle project in Intellij or any IDE of your choosing and add the following dependencies:\n\n```groovy\ndependencies {\n    compile \"org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version\"\n    compile group: \"org.http4k\", name: \"http4k-core\", version: \"3.113.0\"\n    compile group: \"org.http4k\", name: \"http4k-server-netty\", version: \"3.113.0\"\n}\n```\n\nThis will add the base http4k library and the netty server library, which these days is my underlying server of choice when building JVM microservices. However, http4k supports various other server implementation as well such as Jetty, Apache Tomcat etc. and some other prominent jvm web servers.\n\nFirst thing I tried to do was to experiment setting up a simple http server, this is where http4k is a joy to work with as a library.\n\nSetting up a basic server is fairly simple and requires almost no effort.\n\n```kotlin\nfun main() {\n\n    val app = routes(\n        \"/alive\" bind GET to { Response(OK).body(\"The crew is more kahless now than vogon. biological and tightly dead.\") },\n        \"/api\" bind routes(\n            \"/embedLink\" bind GET to { request ->  Response(OK).body(getOembedData(request.query(\"link\")!!))}\n        )\n    )\n\n    val nettyServer = app.asServer(Netty(9000)).start()\n}\n```\nThe snippet above starts up a basic Netty server on port 9000. The startup time is very small, I calculated less than <2 seconds in my observations but the tests were not rigorous so take it with a grain of salt. Once started, the app will start serving the two routes `/alive` and `/api` on the local machine. the alive endpoint is simple to make sure we can ping the app so I;m not going to talk about it anymore. The `/api` link however has an embedded route to `/embedLink` which allows us to make *GET* calls to the server with the query param link which contains the link to the resource we are wanting to get the oembed link for.\n\nSo, let's talk a little bit more about how we do that...\n\n## Extracting Oembed data\n\nNow oembed as a protocol is fairly old and many services directly support getting oembed data for the content on their sites using public APIs. One of such sites is [Instagram](https://www.instagram.com/) which has a nice api that properly adheres to oembed standards. Without going to deep into the oembed specification (which if you're keen you can read more about [here](https://oembed.com/#section2)), we'll see how we use the powerful lensing capability of http4k modules to extract oembed data.\n\nThe `getOembedData()` function from the routes code snipper in the previous section can be implemented as:\n\n```kotlin\nfun getOembedData(link: String): String {\n    val request = Request(Method.GET, \"https://api.instagram.com/oembed/?url=$link\")\n\n    val client: HttpHandler = JavaHttpClient()\n\n    val igLens = Body.auto<IgOembedResponse>().toLens()\n\n    return igLens.extract(client(request)).html\n}\n```\n\nHere we provide the function an actual link to the resource (in this case a link to a post instagram) and use the hardcoded instagram oembed url to grab the oembed html.  \n\nTo actually parse the returned response from instagram, we use a very nifty feature in http4k called [Lenses](https://www.http4k.org/cookbook/typesafe_http_requests_with_lenses/) which allows us to use typesafety while working with the request/response from the http client calls. Lenses are a very powerful feature and allow not only immutable parsing of request/response objects but also use ADTs to parse the responses in an [Maybe](https://en.wikipedia.org/wiki/Monad_(functional_programming)#An_example:_Maybe) using functional extension libraries for kotlin such as [Arrow](https://arrow-kt.io/).\n\nTo actually extract the data, we have to define the type of the returned response first and nothing better to do that, than the ever so simple kotlin data classes:\n\n```kotlin\n@JsonIgnoreProperties(ignoreUnknown = true)\ndata class IgOembedResponse(\n    val version: String?,\n    val title: String?,\n    @JsonAlias(\"author_name\")\n    val authorName: String?,\n    @JsonAlias(\"author_url\")\n    val authorUrl: String?,\n    @JsonAlias(\"author_id\")\n    val authorId: Long?,\n    @JsonAlias(\"media_id\")\n    val mediaId: String?,\n    @JsonAlias(\"provider_name\")\n    val providerName: String?,\n    @JsonAlias(\"provider_url\")\n    val providerUrl: String?,\n    val type: String?,\n    val width: Int?,\n    val height: Int?,\n    val html: String,\n    @JsonAlias(\"thumbnail_url\")\n    val thumbnailUrl: String?,\n    @JsonAlias(\"thumbnail_width\")\n    val thumbnailWidth: String?,\n    @JsonAlias(\"thumbnail_height\")\n    val thumbnailHeight: String?\n)\n```\n\nIn this example, I've used the `@JsonIgnoreProperties` and `@JsonAlias` annotations from [jackson](https://github.com/FasterXML/jackson) which is a well known serialization/deserialization library for java. However, http4k does not limit to just one such library and provides various options such as [Gson](https://github.com/google/gson), [moshi](https://github.com/square/moshi) etc. as plugins. Just remember to add the library of your choice in your build.gradle.\n\nFinally, going back to the our code snippet for `getOembedData` introduced earlier, we first setup a new client:\n\n```kotlin\nval client: HttpHandler = JavaHttpClient()\n```\n\nwhich gives us a new Java based http client, which is a simple implementation of a simple Request -> Response client as a function introduced in the [previous section](## Setting up a micro server with http4k). All it does is take a request and parses the response as a bytestream. \n\nTo parse the bytestream in a typesafe way, we attach it to our lens which contains the data class we just defined:\n\n```kotlin\nigLens.extract(client(request))\n```\n\nif the request is succesful, we will get an object parsed into the `IgOembedResponse` type. For our purposes, what we really need is the html, which gives us the full oembed html whioch we can use in an iframe.\n\n\n### Final Notes\nIn the end, I ended up deploying the app on aws lambda by by setting up an API gateway and a lambda function that called the final app. The final cleaned source code for the app is located [here](https://github.com/shavz/koember) and it also contains the instructions on how to call the aws lambda function to get the oembed responses.\n\nAll in all, I was pleasantly surprised at how productive I was working with http4k and how easy it is to setup a FAAS type application using kotlin and AWS.\n","source":"_posts/Simple-Oembed-Service-Using-Http4k-Framework.md","raw":"---\ntitle: Simple Oembed Service Using Http4k Framework\ndate: 2019-03-18 11:27:06\ntags:\n- http4k\n- kotlin\n- oembed\ncategories:\n- showcase\n---\n\nRecently on my usual #githunt prowl I came across a new promising http library called [http4k](https://github.com/http4k/http4k/). The library is based on the philosophy of **Application as Function** based on the twitter paper [Your Server as a Function](https://monkey.org/~marius/funsrv.pdf) and promises a lightweight a server toolkit alongwith a very modular approach to adding functionality on top of the core set of capabilities built in. But the best part of all, http4k is written in pure Kotlin and follows a consistent functional approach in handling http services.\n\nNow, as much as a like the kitchen sink approach of Spring framework in getting an almost enterprise ready service running with a couple of tutorials and minimal effort , I really wanted to try my hands at something lighter and different. \n\n## Setting up a micro server with http4k\n\nHttp4k provides a simple yet highly configurable way to setup a microserver using nothing but just the core client and an underlying webserver of choosing. \n\nTo start off, create a new base gradle project in Intellij or any IDE of your choosing and add the following dependencies:\n\n```groovy\ndependencies {\n    compile \"org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version\"\n    compile group: \"org.http4k\", name: \"http4k-core\", version: \"3.113.0\"\n    compile group: \"org.http4k\", name: \"http4k-server-netty\", version: \"3.113.0\"\n}\n```\n\nThis will add the base http4k library and the netty server library, which these days is my underlying server of choice when building JVM microservices. However, http4k supports various other server implementation as well such as Jetty, Apache Tomcat etc. and some other prominent jvm web servers.\n\nFirst thing I tried to do was to experiment setting up a simple http server, this is where http4k is a joy to work with as a library.\n\nSetting up a basic server is fairly simple and requires almost no effort.\n\n```kotlin\nfun main() {\n\n    val app = routes(\n        \"/alive\" bind GET to { Response(OK).body(\"The crew is more kahless now than vogon. biological and tightly dead.\") },\n        \"/api\" bind routes(\n            \"/embedLink\" bind GET to { request ->  Response(OK).body(getOembedData(request.query(\"link\")!!))}\n        )\n    )\n\n    val nettyServer = app.asServer(Netty(9000)).start()\n}\n```\nThe snippet above starts up a basic Netty server on port 9000. The startup time is very small, I calculated less than <2 seconds in my observations but the tests were not rigorous so take it with a grain of salt. Once started, the app will start serving the two routes `/alive` and `/api` on the local machine. the alive endpoint is simple to make sure we can ping the app so I;m not going to talk about it anymore. The `/api` link however has an embedded route to `/embedLink` which allows us to make *GET* calls to the server with the query param link which contains the link to the resource we are wanting to get the oembed link for.\n\nSo, let's talk a little bit more about how we do that...\n\n## Extracting Oembed data\n\nNow oembed as a protocol is fairly old and many services directly support getting oembed data for the content on their sites using public APIs. One of such sites is [Instagram](https://www.instagram.com/) which has a nice api that properly adheres to oembed standards. Without going to deep into the oembed specification (which if you're keen you can read more about [here](https://oembed.com/#section2)), we'll see how we use the powerful lensing capability of http4k modules to extract oembed data.\n\nThe `getOembedData()` function from the routes code snipper in the previous section can be implemented as:\n\n```kotlin\nfun getOembedData(link: String): String {\n    val request = Request(Method.GET, \"https://api.instagram.com/oembed/?url=$link\")\n\n    val client: HttpHandler = JavaHttpClient()\n\n    val igLens = Body.auto<IgOembedResponse>().toLens()\n\n    return igLens.extract(client(request)).html\n}\n```\n\nHere we provide the function an actual link to the resource (in this case a link to a post instagram) and use the hardcoded instagram oembed url to grab the oembed html.  \n\nTo actually parse the returned response from instagram, we use a very nifty feature in http4k called [Lenses](https://www.http4k.org/cookbook/typesafe_http_requests_with_lenses/) which allows us to use typesafety while working with the request/response from the http client calls. Lenses are a very powerful feature and allow not only immutable parsing of request/response objects but also use ADTs to parse the responses in an [Maybe](https://en.wikipedia.org/wiki/Monad_(functional_programming)#An_example:_Maybe) using functional extension libraries for kotlin such as [Arrow](https://arrow-kt.io/).\n\nTo actually extract the data, we have to define the type of the returned response first and nothing better to do that, than the ever so simple kotlin data classes:\n\n```kotlin\n@JsonIgnoreProperties(ignoreUnknown = true)\ndata class IgOembedResponse(\n    val version: String?,\n    val title: String?,\n    @JsonAlias(\"author_name\")\n    val authorName: String?,\n    @JsonAlias(\"author_url\")\n    val authorUrl: String?,\n    @JsonAlias(\"author_id\")\n    val authorId: Long?,\n    @JsonAlias(\"media_id\")\n    val mediaId: String?,\n    @JsonAlias(\"provider_name\")\n    val providerName: String?,\n    @JsonAlias(\"provider_url\")\n    val providerUrl: String?,\n    val type: String?,\n    val width: Int?,\n    val height: Int?,\n    val html: String,\n    @JsonAlias(\"thumbnail_url\")\n    val thumbnailUrl: String?,\n    @JsonAlias(\"thumbnail_width\")\n    val thumbnailWidth: String?,\n    @JsonAlias(\"thumbnail_height\")\n    val thumbnailHeight: String?\n)\n```\n\nIn this example, I've used the `@JsonIgnoreProperties` and `@JsonAlias` annotations from [jackson](https://github.com/FasterXML/jackson) which is a well known serialization/deserialization library for java. However, http4k does not limit to just one such library and provides various options such as [Gson](https://github.com/google/gson), [moshi](https://github.com/square/moshi) etc. as plugins. Just remember to add the library of your choice in your build.gradle.\n\nFinally, going back to the our code snippet for `getOembedData` introduced earlier, we first setup a new client:\n\n```kotlin\nval client: HttpHandler = JavaHttpClient()\n```\n\nwhich gives us a new Java based http client, which is a simple implementation of a simple Request -> Response client as a function introduced in the [previous section](## Setting up a micro server with http4k). All it does is take a request and parses the response as a bytestream. \n\nTo parse the bytestream in a typesafe way, we attach it to our lens which contains the data class we just defined:\n\n```kotlin\nigLens.extract(client(request))\n```\n\nif the request is succesful, we will get an object parsed into the `IgOembedResponse` type. For our purposes, what we really need is the html, which gives us the full oembed html whioch we can use in an iframe.\n\n\n### Final Notes\nIn the end, I ended up deploying the app on aws lambda by by setting up an API gateway and a lambda function that called the final app. The final cleaned source code for the app is located [here](https://github.com/shavz/koember) and it also contains the instructions on how to call the aws lambda function to get the oembed responses.\n\nAll in all, I was pleasantly surprised at how productive I was working with http4k and how easy it is to setup a FAAS type application using kotlin and AWS.\n","slug":"Simple-Oembed-Service-Using-Http4k-Framework","published":1,"updated":"2019-08-26T07:04:12.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck50cg3t50000a4eftv5d0oy3","content":"<p>Recently on my usual #githunt prowl I came across a new promising http library called <a href=\"https://github.com/http4k/http4k/\" target=\"_blank\" rel=\"noopener\">http4k</a>. The library is based on the philosophy of <strong>Application as Function</strong> based on the twitter paper <a href=\"https://monkey.org/~marius/funsrv.pdf\" target=\"_blank\" rel=\"noopener\">Your Server as a Function</a> and promises a lightweight a server toolkit alongwith a very modular approach to adding functionality on top of the core set of capabilities built in. But the best part of all, http4k is written in pure Kotlin and follows a consistent functional approach in handling http services.</p>\n<p>Now, as much as a like the kitchen sink approach of Spring framework in getting an almost enterprise ready service running with a couple of tutorials and minimal effort , I really wanted to try my hands at something lighter and different. </p>\n<h2 id=\"Setting-up-a-micro-server-with-http4k\"><a href=\"#Setting-up-a-micro-server-with-http4k\" class=\"headerlink\" title=\"Setting up a micro server with http4k\"></a>Setting up a micro server with http4k</h2><p>Http4k provides a simple yet highly configurable way to setup a microserver using nothing but just the core client and an underlying webserver of choosing. </p>\n<p>To start off, create a new base gradle project in Intellij or any IDE of your choosing and add the following dependencies:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    compile <span class=\"string\">\"org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version\"</span></span><br><span class=\"line\">    compile <span class=\"string\">group:</span> <span class=\"string\">\"org.http4k\"</span>, <span class=\"string\">name:</span> <span class=\"string\">\"http4k-core\"</span>, <span class=\"string\">version:</span> <span class=\"string\">\"3.113.0\"</span></span><br><span class=\"line\">    compile <span class=\"string\">group:</span> <span class=\"string\">\"org.http4k\"</span>, <span class=\"string\">name:</span> <span class=\"string\">\"http4k-server-netty\"</span>, <span class=\"string\">version:</span> <span class=\"string\">\"3.113.0\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This will add the base http4k library and the netty server library, which these days is my underlying server of choice when building JVM microservices. However, http4k supports various other server implementation as well such as Jetty, Apache Tomcat etc. and some other prominent jvm web servers.</p>\n<p>First thing I tried to do was to experiment setting up a simple http server, this is where http4k is a joy to work with as a library.</p>\n<p>Setting up a basic server is fairly simple and requires almost no effort.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> app = routes(</span><br><span class=\"line\">        <span class=\"string\">\"/alive\"</span> bind GET to &#123; Response(OK).body(<span class=\"string\">\"The crew is more kahless now than vogon. biological and tightly dead.\"</span>) &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"/api\"</span> bind routes(</span><br><span class=\"line\">            <span class=\"string\">\"/embedLink\"</span> bind GET to &#123; request -&gt;  Response(OK).body(getOembedData(request.query(<span class=\"string\">\"link\"</span>)!!))&#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> nettyServer = app.asServer(Netty(<span class=\"number\">9000</span>)).start()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The snippet above starts up a basic Netty server on port 9000. The startup time is very small, I calculated less than &lt;2 seconds in my observations but the tests were not rigorous so take it with a grain of salt. Once started, the app will start serving the two routes <code>/alive</code> and <code>/api</code> on the local machine. the alive endpoint is simple to make sure we can ping the app so I;m not going to talk about it anymore. The <code>/api</code> link however has an embedded route to <code>/embedLink</code> which allows us to make <em>GET</em> calls to the server with the query param link which contains the link to the resource we are wanting to get the oembed link for.</p>\n<p>So, let’s talk a little bit more about how we do that…</p>\n<h2 id=\"Extracting-Oembed-data\"><a href=\"#Extracting-Oembed-data\" class=\"headerlink\" title=\"Extracting Oembed data\"></a>Extracting Oembed data</h2><p>Now oembed as a protocol is fairly old and many services directly support getting oembed data for the content on their sites using public APIs. One of such sites is <a href=\"https://www.instagram.com/\" target=\"_blank\" rel=\"noopener\">Instagram</a> which has a nice api that properly adheres to oembed standards. Without going to deep into the oembed specification (which if you’re keen you can read more about <a href=\"https://oembed.com/#section2\" target=\"_blank\" rel=\"noopener\">here</a>), we’ll see how we use the powerful lensing capability of http4k modules to extract oembed data.</p>\n<p>The <code>getOembedData()</code> function from the routes code snipper in the previous section can be implemented as:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getOembedData</span><span class=\"params\">(link: <span class=\"type\">String</span>)</span></span>: String &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> request = Request(Method.GET, <span class=\"string\">\"https://api.instagram.com/oembed/?url=<span class=\"variable\">$link</span>\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> client: HttpHandler = JavaHttpClient()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> igLens = Body.auto&lt;IgOembedResponse&gt;().toLens()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> igLens.extract(client(request)).html</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Here we provide the function an actual link to the resource (in this case a link to a post instagram) and use the hardcoded instagram oembed url to grab the oembed html.  </p>\n<p>To actually parse the returned response from instagram, we use a very nifty feature in http4k called <a href=\"https://www.http4k.org/cookbook/typesafe_http_requests_with_lenses/\" target=\"_blank\" rel=\"noopener\">Lenses</a> which allows us to use typesafety while working with the request/response from the http client calls. Lenses are a very powerful feature and allow not only immutable parsing of request/response objects but also use ADTs to parse the responses in an <a href=\"https://en.wikipedia.org/wiki/Monad_(functional_programming\" target=\"_blank\" rel=\"noopener\">Maybe</a>#An_example:_Maybe) using functional extension libraries for kotlin such as <a href=\"https://arrow-kt.io/\" target=\"_blank\" rel=\"noopener\">Arrow</a>.</p>\n<p>To actually extract the data, we have to define the type of the returned response first and nothing better to do that, than the ever so simple kotlin data classes:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JsonIgnoreProperties(ignoreUnknown = true)</span></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IgOembedResponse</span></span>(</span><br><span class=\"line\">    <span class=\"keyword\">val</span> version: String?,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> title: String?,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"author_name\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> authorName: String?,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"author_url\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> authorUrl: String?,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"author_id\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> authorId: <span class=\"built_in\">Long</span>?,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"media_id\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> mediaId: String?,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"provider_name\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> providerName: String?,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"provider_url\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> providerUrl: String?,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> type: String?,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> width: <span class=\"built_in\">Int</span>?,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> height: <span class=\"built_in\">Int</span>?,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> html: String,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"thumbnail_url\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> thumbnailUrl: String?,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"thumbnail_width\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> thumbnailWidth: String?,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"thumbnail_height\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> thumbnailHeight: String?</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>In this example, I’ve used the <code>@JsonIgnoreProperties</code> and <code>@JsonAlias</code> annotations from <a href=\"https://github.com/FasterXML/jackson\" target=\"_blank\" rel=\"noopener\">jackson</a> which is a well known serialization/deserialization library for java. However, http4k does not limit to just one such library and provides various options such as <a href=\"https://github.com/google/gson\" target=\"_blank\" rel=\"noopener\">Gson</a>, <a href=\"https://github.com/square/moshi\" target=\"_blank\" rel=\"noopener\">moshi</a> etc. as plugins. Just remember to add the library of your choice in your build.gradle.</p>\n<p>Finally, going back to the our code snippet for <code>getOembedData</code> introduced earlier, we first setup a new client:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> client: HttpHandler = JavaHttpClient()</span><br></pre></td></tr></table></figure>\n<p>which gives us a new Java based http client, which is a simple implementation of a simple Request -&gt; Response client as a function introduced in the <a href=\"## Setting up a micro server with http4k\">previous section</a>. All it does is take a request and parses the response as a bytestream. </p>\n<p>To parse the bytestream in a typesafe way, we attach it to our lens which contains the data class we just defined:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">igLens.extract(client(request))</span><br></pre></td></tr></table></figure>\n<p>if the request is succesful, we will get an object parsed into the <code>IgOembedResponse</code> type. For our purposes, what we really need is the html, which gives us the full oembed html whioch we can use in an iframe.</p>\n<h3 id=\"Final-Notes\"><a href=\"#Final-Notes\" class=\"headerlink\" title=\"Final Notes\"></a>Final Notes</h3><p>In the end, I ended up deploying the app on aws lambda by by setting up an API gateway and a lambda function that called the final app. The final cleaned source code for the app is located <a href=\"https://github.com/shavz/koember\" target=\"_blank\" rel=\"noopener\">here</a> and it also contains the instructions on how to call the aws lambda function to get the oembed responses.</p>\n<p>All in all, I was pleasantly surprised at how productive I was working with http4k and how easy it is to setup a FAAS type application using kotlin and AWS.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Recently on my usual #githunt prowl I came across a new promising http library called <a href=\"https://github.com/http4k/http4k/\" target=\"_blank\" rel=\"noopener\">http4k</a>. The library is based on the philosophy of <strong>Application as Function</strong> based on the twitter paper <a href=\"https://monkey.org/~marius/funsrv.pdf\" target=\"_blank\" rel=\"noopener\">Your Server as a Function</a> and promises a lightweight a server toolkit alongwith a very modular approach to adding functionality on top of the core set of capabilities built in. But the best part of all, http4k is written in pure Kotlin and follows a consistent functional approach in handling http services.</p>\n<p>Now, as much as a like the kitchen sink approach of Spring framework in getting an almost enterprise ready service running with a couple of tutorials and minimal effort , I really wanted to try my hands at something lighter and different. </p>\n<h2 id=\"Setting-up-a-micro-server-with-http4k\"><a href=\"#Setting-up-a-micro-server-with-http4k\" class=\"headerlink\" title=\"Setting up a micro server with http4k\"></a>Setting up a micro server with http4k</h2><p>Http4k provides a simple yet highly configurable way to setup a microserver using nothing but just the core client and an underlying webserver of choosing. </p>\n<p>To start off, create a new base gradle project in Intellij or any IDE of your choosing and add the following dependencies:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    compile <span class=\"string\">\"org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version\"</span></span><br><span class=\"line\">    compile <span class=\"string\">group:</span> <span class=\"string\">\"org.http4k\"</span>, <span class=\"string\">name:</span> <span class=\"string\">\"http4k-core\"</span>, <span class=\"string\">version:</span> <span class=\"string\">\"3.113.0\"</span></span><br><span class=\"line\">    compile <span class=\"string\">group:</span> <span class=\"string\">\"org.http4k\"</span>, <span class=\"string\">name:</span> <span class=\"string\">\"http4k-server-netty\"</span>, <span class=\"string\">version:</span> <span class=\"string\">\"3.113.0\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This will add the base http4k library and the netty server library, which these days is my underlying server of choice when building JVM microservices. However, http4k supports various other server implementation as well such as Jetty, Apache Tomcat etc. and some other prominent jvm web servers.</p>\n<p>First thing I tried to do was to experiment setting up a simple http server, this is where http4k is a joy to work with as a library.</p>\n<p>Setting up a basic server is fairly simple and requires almost no effort.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> app = routes(</span><br><span class=\"line\">        <span class=\"string\">\"/alive\"</span> bind GET to &#123; Response(OK).body(<span class=\"string\">\"The crew is more kahless now than vogon. biological and tightly dead.\"</span>) &#125;,</span><br><span class=\"line\">        <span class=\"string\">\"/api\"</span> bind routes(</span><br><span class=\"line\">            <span class=\"string\">\"/embedLink\"</span> bind GET to &#123; request -&gt;  Response(OK).body(getOembedData(request.query(<span class=\"string\">\"link\"</span>)!!))&#125;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> nettyServer = app.asServer(Netty(<span class=\"number\">9000</span>)).start()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The snippet above starts up a basic Netty server on port 9000. The startup time is very small, I calculated less than &lt;2 seconds in my observations but the tests were not rigorous so take it with a grain of salt. Once started, the app will start serving the two routes <code>/alive</code> and <code>/api</code> on the local machine. the alive endpoint is simple to make sure we can ping the app so I;m not going to talk about it anymore. The <code>/api</code> link however has an embedded route to <code>/embedLink</code> which allows us to make <em>GET</em> calls to the server with the query param link which contains the link to the resource we are wanting to get the oembed link for.</p>\n<p>So, let’s talk a little bit more about how we do that…</p>\n<h2 id=\"Extracting-Oembed-data\"><a href=\"#Extracting-Oembed-data\" class=\"headerlink\" title=\"Extracting Oembed data\"></a>Extracting Oembed data</h2><p>Now oembed as a protocol is fairly old and many services directly support getting oembed data for the content on their sites using public APIs. One of such sites is <a href=\"https://www.instagram.com/\" target=\"_blank\" rel=\"noopener\">Instagram</a> which has a nice api that properly adheres to oembed standards. Without going to deep into the oembed specification (which if you’re keen you can read more about <a href=\"https://oembed.com/#section2\" target=\"_blank\" rel=\"noopener\">here</a>), we’ll see how we use the powerful lensing capability of http4k modules to extract oembed data.</p>\n<p>The <code>getOembedData()</code> function from the routes code snipper in the previous section can be implemented as:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getOembedData</span><span class=\"params\">(link: <span class=\"type\">String</span>)</span></span>: String &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> request = Request(Method.GET, <span class=\"string\">\"https://api.instagram.com/oembed/?url=<span class=\"variable\">$link</span>\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> client: HttpHandler = JavaHttpClient()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> igLens = Body.auto&lt;IgOembedResponse&gt;().toLens()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> igLens.extract(client(request)).html</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Here we provide the function an actual link to the resource (in this case a link to a post instagram) and use the hardcoded instagram oembed url to grab the oembed html.  </p>\n<p>To actually parse the returned response from instagram, we use a very nifty feature in http4k called <a href=\"https://www.http4k.org/cookbook/typesafe_http_requests_with_lenses/\" target=\"_blank\" rel=\"noopener\">Lenses</a> which allows us to use typesafety while working with the request/response from the http client calls. Lenses are a very powerful feature and allow not only immutable parsing of request/response objects but also use ADTs to parse the responses in an <a href=\"https://en.wikipedia.org/wiki/Monad_(functional_programming\" target=\"_blank\" rel=\"noopener\">Maybe</a>#An_example:_Maybe) using functional extension libraries for kotlin such as <a href=\"https://arrow-kt.io/\" target=\"_blank\" rel=\"noopener\">Arrow</a>.</p>\n<p>To actually extract the data, we have to define the type of the returned response first and nothing better to do that, than the ever so simple kotlin data classes:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JsonIgnoreProperties(ignoreUnknown = true)</span></span><br><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IgOembedResponse</span></span>(</span><br><span class=\"line\">    <span class=\"keyword\">val</span> version: String?,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> title: String?,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"author_name\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> authorName: String?,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"author_url\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> authorUrl: String?,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"author_id\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> authorId: <span class=\"built_in\">Long</span>?,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"media_id\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> mediaId: String?,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"provider_name\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> providerName: String?,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"provider_url\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> providerUrl: String?,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> type: String?,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> width: <span class=\"built_in\">Int</span>?,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> height: <span class=\"built_in\">Int</span>?,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> html: String,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"thumbnail_url\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> thumbnailUrl: String?,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"thumbnail_width\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> thumbnailWidth: String?,</span><br><span class=\"line\">    <span class=\"meta\">@JsonAlias(<span class=\"meta-string\">\"thumbnail_height\"</span>)</span></span><br><span class=\"line\">    <span class=\"keyword\">val</span> thumbnailHeight: String?</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>In this example, I’ve used the <code>@JsonIgnoreProperties</code> and <code>@JsonAlias</code> annotations from <a href=\"https://github.com/FasterXML/jackson\" target=\"_blank\" rel=\"noopener\">jackson</a> which is a well known serialization/deserialization library for java. However, http4k does not limit to just one such library and provides various options such as <a href=\"https://github.com/google/gson\" target=\"_blank\" rel=\"noopener\">Gson</a>, <a href=\"https://github.com/square/moshi\" target=\"_blank\" rel=\"noopener\">moshi</a> etc. as plugins. Just remember to add the library of your choice in your build.gradle.</p>\n<p>Finally, going back to the our code snippet for <code>getOembedData</code> introduced earlier, we first setup a new client:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> client: HttpHandler = JavaHttpClient()</span><br></pre></td></tr></table></figure>\n<p>which gives us a new Java based http client, which is a simple implementation of a simple Request -&gt; Response client as a function introduced in the <a href=\"## Setting up a micro server with http4k\">previous section</a>. All it does is take a request and parses the response as a bytestream. </p>\n<p>To parse the bytestream in a typesafe way, we attach it to our lens which contains the data class we just defined:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">igLens.extract(client(request))</span><br></pre></td></tr></table></figure>\n<p>if the request is succesful, we will get an object parsed into the <code>IgOembedResponse</code> type. For our purposes, what we really need is the html, which gives us the full oembed html whioch we can use in an iframe.</p>\n<h3 id=\"Final-Notes\"><a href=\"#Final-Notes\" class=\"headerlink\" title=\"Final Notes\"></a>Final Notes</h3><p>In the end, I ended up deploying the app on aws lambda by by setting up an API gateway and a lambda function that called the final app. The final cleaned source code for the app is located <a href=\"https://github.com/shavz/koember\" target=\"_blank\" rel=\"noopener\">here</a> and it also contains the instructions on how to call the aws lambda function to get the oembed responses.</p>\n<p>All in all, I was pleasantly surprised at how productive I was working with http4k and how easy it is to setup a FAAS type application using kotlin and AWS.</p>\n"},{"title":"Post Boot Actions Using Application Events","date":"2019-01-10T07:23:18.000Z","_content":"\n## Background\n\nRecently I faced an interesting problem at work. A production app written in Kotlin with Spring Webflux as the webframework had suddenly started taking more than 189 seconds on average to start (more than 3 minutes 😱).\n\nNow as much as I love spring for the easy to use and battle tested APIs, everyone knows its not the nimblest of frameworks around, but having a boot time of 3 minutes was simply unacceptable. The problem was made even worse by the fact that our production kubernetes cluster, on which the app was deployed, usually checks if the app is alive (a simple alive endpoint on the REST api) and triggers container restart if the app doesn't respond withing a given time threshold. Due the delay in the app boot, the kubernetes kept on assuming the app has not started yet and it triggered a flurry of container restarts - resulting in our very talented and very hard working support team being pinged at ungodly hours. Something needed to be done...\n\nAfter spending some time analyzing the application, we found that most of the time was being spent in the startup for [Elastic Search Transport client](https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/transport-client.html), which loads up several plugins, one of which is the `Transport Client` which relies on the negotiating underlying netty thread which also happens to be the same underlying server that spring webflux uses.\n\nTo test the theory that this was the reason the build was slowing down, we commented out the code that builds up the client and noticed that the app was starting in less than 10 seconds now! WOAH! that's a big gain...\n\n## Setting up post bootup logic\n\n[Spring](https://spring.io/) always has had events inside the system since the very beginning as a loose way to exchange application context information inside a running spring app and there are variety uses, most frequently being the ability to detect any local or global event change and then associating actions or events that take place post the event taking place.\n\nTo solve out problem, we created a class called event listener where all the startup logic was shifted (the code is in [Kotlin](https://kotlinlang.org/)):\n\n```kotlin\nclass EventListener {\n\n    private fun expensiveThings() {\n//        do expensive intialization steps here\n    }\n\n    @EventListener(ApplicationReadyEvent::class)\n    fun bootStrap() {\n        expensiveThings()\n    }\n}\n```\n\nThe code above is very simple, it sets up a class called event listener which will contain all our spring application event listener logic. We have a function named `expensiveThings()` , which does something that involves heavy initialization (think network negotiation, I/O bound work etc.) steps and something we want to do pot application startup. Ideal candidates for this scenario might be plugins or utilities that let you interact with third party services like elastic search but that are not absolutely necessary to have when your app is first starting to serve it's controller endpoints. Inside `expensiveThings()` we can add something with heavy init. Function `bootStrap()` is where all the magic takes place. We use the spring [EventListener](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/event/EventListener.html) which gives us the ability to link any `void` returning function to an application event, in other words, at runtime spring will proxy the call for that event to be triggered when the registered event is received inside the springboot application context. In our case that is the springs **ApplicationReadyEvent** which gets sent out the first time a spring boot application fully starts up.\n\nBut our job is not done yet, we would like a way to access the initialized variable throughout our application, and we would like to do it in as idiomatic spring way as possible.\n\nTo achieve that we will modify our previous code as follows:\n\n```kotlin\n@Configuration\nclass EventListener {\n\n    lateinit var poststartupVar: String\n\n    private fun expensiveThings() {\n        poststartupVar = \"this is just an example\"\n    }\n\n    @EventListener(ApplicationReadyEvent::class)\n    fun bootStrap() {\n        expensiveThings()\n    }\n}\n```\n\nhere we've modified the class to include a `lateinit` (if you don't know, a [lateinit](https://kotlinlang.org/docs/reference/properties.html#late-initialized-properties-and-variables) variable in kotlin is simply a variable that doesn't need to be initialized at declaration, this makes the code cleaner but you run the risk of an ugly exception if the variable is still initialized at the time of accessing); which then gets instantiated in expensive things. We've also marked the class as a configuration object, which makes it a candidate for injection autowring througghout your spring managed beans like Components, Services etc.\n\nThis should get you up an running with a variable that gets initialized post the ApplicationReadyEvent which, if your application has REST controllers, happens post the app starting to listen on those endpoints.\n\nHowever, what if this component is a core component and we want to hard exit as soon as possible. \n\nNo problem, as demonstrated below:\n\n```kotlin\n@Configuration\nclass EventListener: ApplicationContextAware {\n\n    lateinit var poststartupVar: String\n\n    private var context: ApplicationContext? = null\n\n    private fun expensiveThings() {\n        poststartupVar = \"this is just an example\"\n    }\n\n    @EventListener(ApplicationReadyEvent::class)\n    fun bootStrap() {\n        try {\n            expensiveThings()\n        } catch (ex: Exception) {\n            panic()\n        }\n    }\n\n    private fun panic() {\n        val containerContext = this.context as ConfigurableApplicationContext\n        SpringApplication.exit(containerContext)\n    }\n}\n```\n\nHere we use the help of [ApplicationContext](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/ApplicationContext.html) to inject the current running springboot application context in the even listener configuration (more details [here](https://spring.io/understanding/application-context)). In case an exception is encountered in the `bootStrap()`, the `panic()` function will be invoked and the spring application will be gracefully exited (the graceful bit depends on your configuration but that's for another blogpost).\n\n## Final notes\nA code very similar to that with some business speicifc sauce is what I used to solve the problem we encountered in the previous section and it brought down the application startup time to less than 15 seconds, which was a major win for a critical production application. Utilizing the APIs and utilities provided by Spring out of the box in my opinion provides the easiest and most convenient way to solve most production problems and is a testament to maturity of Spring and its status as one of the top jvm web framework out there.\n\n","source":"_posts/Post-Boot-Actions-Using-Application-Events.md","raw":"---\ntitle: Post Boot Actions Using Application Events\ndate: 2019-01-10 18:23:18\ntags:\n- springboot\n- kotlin\ncategories:\n- tutorial\n---\n\n## Background\n\nRecently I faced an interesting problem at work. A production app written in Kotlin with Spring Webflux as the webframework had suddenly started taking more than 189 seconds on average to start (more than 3 minutes 😱).\n\nNow as much as I love spring for the easy to use and battle tested APIs, everyone knows its not the nimblest of frameworks around, but having a boot time of 3 minutes was simply unacceptable. The problem was made even worse by the fact that our production kubernetes cluster, on which the app was deployed, usually checks if the app is alive (a simple alive endpoint on the REST api) and triggers container restart if the app doesn't respond withing a given time threshold. Due the delay in the app boot, the kubernetes kept on assuming the app has not started yet and it triggered a flurry of container restarts - resulting in our very talented and very hard working support team being pinged at ungodly hours. Something needed to be done...\n\nAfter spending some time analyzing the application, we found that most of the time was being spent in the startup for [Elastic Search Transport client](https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/transport-client.html), which loads up several plugins, one of which is the `Transport Client` which relies on the negotiating underlying netty thread which also happens to be the same underlying server that spring webflux uses.\n\nTo test the theory that this was the reason the build was slowing down, we commented out the code that builds up the client and noticed that the app was starting in less than 10 seconds now! WOAH! that's a big gain...\n\n## Setting up post bootup logic\n\n[Spring](https://spring.io/) always has had events inside the system since the very beginning as a loose way to exchange application context information inside a running spring app and there are variety uses, most frequently being the ability to detect any local or global event change and then associating actions or events that take place post the event taking place.\n\nTo solve out problem, we created a class called event listener where all the startup logic was shifted (the code is in [Kotlin](https://kotlinlang.org/)):\n\n```kotlin\nclass EventListener {\n\n    private fun expensiveThings() {\n//        do expensive intialization steps here\n    }\n\n    @EventListener(ApplicationReadyEvent::class)\n    fun bootStrap() {\n        expensiveThings()\n    }\n}\n```\n\nThe code above is very simple, it sets up a class called event listener which will contain all our spring application event listener logic. We have a function named `expensiveThings()` , which does something that involves heavy initialization (think network negotiation, I/O bound work etc.) steps and something we want to do pot application startup. Ideal candidates for this scenario might be plugins or utilities that let you interact with third party services like elastic search but that are not absolutely necessary to have when your app is first starting to serve it's controller endpoints. Inside `expensiveThings()` we can add something with heavy init. Function `bootStrap()` is where all the magic takes place. We use the spring [EventListener](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/event/EventListener.html) which gives us the ability to link any `void` returning function to an application event, in other words, at runtime spring will proxy the call for that event to be triggered when the registered event is received inside the springboot application context. In our case that is the springs **ApplicationReadyEvent** which gets sent out the first time a spring boot application fully starts up.\n\nBut our job is not done yet, we would like a way to access the initialized variable throughout our application, and we would like to do it in as idiomatic spring way as possible.\n\nTo achieve that we will modify our previous code as follows:\n\n```kotlin\n@Configuration\nclass EventListener {\n\n    lateinit var poststartupVar: String\n\n    private fun expensiveThings() {\n        poststartupVar = \"this is just an example\"\n    }\n\n    @EventListener(ApplicationReadyEvent::class)\n    fun bootStrap() {\n        expensiveThings()\n    }\n}\n```\n\nhere we've modified the class to include a `lateinit` (if you don't know, a [lateinit](https://kotlinlang.org/docs/reference/properties.html#late-initialized-properties-and-variables) variable in kotlin is simply a variable that doesn't need to be initialized at declaration, this makes the code cleaner but you run the risk of an ugly exception if the variable is still initialized at the time of accessing); which then gets instantiated in expensive things. We've also marked the class as a configuration object, which makes it a candidate for injection autowring througghout your spring managed beans like Components, Services etc.\n\nThis should get you up an running with a variable that gets initialized post the ApplicationReadyEvent which, if your application has REST controllers, happens post the app starting to listen on those endpoints.\n\nHowever, what if this component is a core component and we want to hard exit as soon as possible. \n\nNo problem, as demonstrated below:\n\n```kotlin\n@Configuration\nclass EventListener: ApplicationContextAware {\n\n    lateinit var poststartupVar: String\n\n    private var context: ApplicationContext? = null\n\n    private fun expensiveThings() {\n        poststartupVar = \"this is just an example\"\n    }\n\n    @EventListener(ApplicationReadyEvent::class)\n    fun bootStrap() {\n        try {\n            expensiveThings()\n        } catch (ex: Exception) {\n            panic()\n        }\n    }\n\n    private fun panic() {\n        val containerContext = this.context as ConfigurableApplicationContext\n        SpringApplication.exit(containerContext)\n    }\n}\n```\n\nHere we use the help of [ApplicationContext](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/ApplicationContext.html) to inject the current running springboot application context in the even listener configuration (more details [here](https://spring.io/understanding/application-context)). In case an exception is encountered in the `bootStrap()`, the `panic()` function will be invoked and the spring application will be gracefully exited (the graceful bit depends on your configuration but that's for another blogpost).\n\n## Final notes\nA code very similar to that with some business speicifc sauce is what I used to solve the problem we encountered in the previous section and it brought down the application startup time to less than 15 seconds, which was a major win for a critical production application. Utilizing the APIs and utilities provided by Spring out of the box in my opinion provides the easiest and most convenient way to solve most production problems and is a testament to maturity of Spring and its status as one of the top jvm web framework out there.\n\n","slug":"Post-Boot-Actions-Using-Application-Events","published":1,"updated":"2019-08-26T07:04:12.876Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck50cg3t80001a4efnd1jbkg3","content":"<h2 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h2><p>Recently I faced an interesting problem at work. A production app written in Kotlin with Spring Webflux as the webframework had suddenly started taking more than 189 seconds on average to start (more than 3 minutes 😱).</p>\n<p>Now as much as I love spring for the easy to use and battle tested APIs, everyone knows its not the nimblest of frameworks around, but having a boot time of 3 minutes was simply unacceptable. The problem was made even worse by the fact that our production kubernetes cluster, on which the app was deployed, usually checks if the app is alive (a simple alive endpoint on the REST api) and triggers container restart if the app doesn’t respond withing a given time threshold. Due the delay in the app boot, the kubernetes kept on assuming the app has not started yet and it triggered a flurry of container restarts - resulting in our very talented and very hard working support team being pinged at ungodly hours. Something needed to be done…</p>\n<p>After spending some time analyzing the application, we found that most of the time was being spent in the startup for <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/transport-client.html\" target=\"_blank\" rel=\"noopener\">Elastic Search Transport client</a>, which loads up several plugins, one of which is the <code>Transport Client</code> which relies on the negotiating underlying netty thread which also happens to be the same underlying server that spring webflux uses.</p>\n<p>To test the theory that this was the reason the build was slowing down, we commented out the code that builds up the client and noticed that the app was starting in less than 10 seconds now! WOAH! that’s a big gain…</p>\n<h2 id=\"Setting-up-post-bootup-logic\"><a href=\"#Setting-up-post-bootup-logic\" class=\"headerlink\" title=\"Setting up post bootup logic\"></a>Setting up post bootup logic</h2><p><a href=\"https://spring.io/\" target=\"_blank\" rel=\"noopener\">Spring</a> always has had events inside the system since the very beginning as a loose way to exchange application context information inside a running spring app and there are variety uses, most frequently being the ability to detect any local or global event change and then associating actions or events that take place post the event taking place.</p>\n<p>To solve out problem, we created a class called event listener where all the startup logic was shifted (the code is in <a href=\"https://kotlinlang.org/\" target=\"_blank\" rel=\"noopener\">Kotlin</a>):</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">expensiveThings</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        do expensive intialization steps here</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@EventListener(ApplicationReadyEvent::class)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bootStrap</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        expensiveThings()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The code above is very simple, it sets up a class called event listener which will contain all our spring application event listener logic. We have a function named <code>expensiveThings()</code> , which does something that involves heavy initialization (think network negotiation, I/O bound work etc.) steps and something we want to do pot application startup. Ideal candidates for this scenario might be plugins or utilities that let you interact with third party services like elastic search but that are not absolutely necessary to have when your app is first starting to serve it’s controller endpoints. Inside <code>expensiveThings()</code> we can add something with heavy init. Function <code>bootStrap()</code> is where all the magic takes place. We use the spring <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/event/EventListener.html\" target=\"_blank\" rel=\"noopener\">EventListener</a> which gives us the ability to link any <code>void</code> returning function to an application event, in other words, at runtime spring will proxy the call for that event to be triggered when the registered event is received inside the springboot application context. In our case that is the springs <strong>ApplicationReadyEvent</strong> which gets sent out the first time a spring boot application fully starts up.</p>\n<p>But our job is not done yet, we would like a way to access the initialized variable throughout our application, and we would like to do it in as idiomatic spring way as possible.</p>\n<p>To achieve that we will modify our previous code as follows:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> poststartupVar: String</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">expensiveThings</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        poststartupVar = <span class=\"string\">\"this is just an example\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@EventListener(ApplicationReadyEvent::class)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bootStrap</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        expensiveThings()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>here we’ve modified the class to include a <code>lateinit</code> (if you don’t know, a <a href=\"https://kotlinlang.org/docs/reference/properties.html#late-initialized-properties-and-variables\" target=\"_blank\" rel=\"noopener\">lateinit</a> variable in kotlin is simply a variable that doesn’t need to be initialized at declaration, this makes the code cleaner but you run the risk of an ugly exception if the variable is still initialized at the time of accessing); which then gets instantiated in expensive things. We’ve also marked the class as a configuration object, which makes it a candidate for injection autowring througghout your spring managed beans like Components, Services etc.</p>\n<p>This should get you up an running with a variable that gets initialized post the ApplicationReadyEvent which, if your application has REST controllers, happens post the app starting to listen on those endpoints.</p>\n<p>However, what if this component is a core component and we want to hard exit as soon as possible. </p>\n<p>No problem, as demonstrated below:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventListener</span>: <span class=\"type\">ApplicationContextAware &#123;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> poststartupVar: String</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> context: ApplicationContext? = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">expensiveThings</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        poststartupVar = <span class=\"string\">\"this is just an example\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@EventListener(ApplicationReadyEvent::class)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bootStrap</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            expensiveThings()</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ex: Exception) &#123;</span><br><span class=\"line\">            panic()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">panic</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> containerContext = <span class=\"keyword\">this</span>.context <span class=\"keyword\">as</span> ConfigurableApplicationContext</span><br><span class=\"line\">        SpringApplication.exit(containerContext)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Here we use the help of <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/ApplicationContext.html\" target=\"_blank\" rel=\"noopener\">ApplicationContext</a> to inject the current running springboot application context in the even listener configuration (more details <a href=\"https://spring.io/understanding/application-context\" target=\"_blank\" rel=\"noopener\">here</a>). In case an exception is encountered in the <code>bootStrap()</code>, the <code>panic()</code> function will be invoked and the spring application will be gracefully exited (the graceful bit depends on your configuration but that’s for another blogpost).</p>\n<h2 id=\"Final-notes\"><a href=\"#Final-notes\" class=\"headerlink\" title=\"Final notes\"></a>Final notes</h2><p>A code very similar to that with some business speicifc sauce is what I used to solve the problem we encountered in the previous section and it brought down the application startup time to less than 15 seconds, which was a major win for a critical production application. Utilizing the APIs and utilities provided by Spring out of the box in my opinion provides the easiest and most convenient way to solve most production problems and is a testament to maturity of Spring and its status as one of the top jvm web framework out there.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h2><p>Recently I faced an interesting problem at work. A production app written in Kotlin with Spring Webflux as the webframework had suddenly started taking more than 189 seconds on average to start (more than 3 minutes 😱).</p>\n<p>Now as much as I love spring for the easy to use and battle tested APIs, everyone knows its not the nimblest of frameworks around, but having a boot time of 3 minutes was simply unacceptable. The problem was made even worse by the fact that our production kubernetes cluster, on which the app was deployed, usually checks if the app is alive (a simple alive endpoint on the REST api) and triggers container restart if the app doesn’t respond withing a given time threshold. Due the delay in the app boot, the kubernetes kept on assuming the app has not started yet and it triggered a flurry of container restarts - resulting in our very talented and very hard working support team being pinged at ungodly hours. Something needed to be done…</p>\n<p>After spending some time analyzing the application, we found that most of the time was being spent in the startup for <a href=\"https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/transport-client.html\" target=\"_blank\" rel=\"noopener\">Elastic Search Transport client</a>, which loads up several plugins, one of which is the <code>Transport Client</code> which relies on the negotiating underlying netty thread which also happens to be the same underlying server that spring webflux uses.</p>\n<p>To test the theory that this was the reason the build was slowing down, we commented out the code that builds up the client and noticed that the app was starting in less than 10 seconds now! WOAH! that’s a big gain…</p>\n<h2 id=\"Setting-up-post-bootup-logic\"><a href=\"#Setting-up-post-bootup-logic\" class=\"headerlink\" title=\"Setting up post bootup logic\"></a>Setting up post bootup logic</h2><p><a href=\"https://spring.io/\" target=\"_blank\" rel=\"noopener\">Spring</a> always has had events inside the system since the very beginning as a loose way to exchange application context information inside a running spring app and there are variety uses, most frequently being the ability to detect any local or global event change and then associating actions or events that take place post the event taking place.</p>\n<p>To solve out problem, we created a class called event listener where all the startup logic was shifted (the code is in <a href=\"https://kotlinlang.org/\" target=\"_blank\" rel=\"noopener\">Kotlin</a>):</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">expensiveThings</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        do expensive intialization steps here</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@EventListener(ApplicationReadyEvent::class)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bootStrap</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        expensiveThings()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The code above is very simple, it sets up a class called event listener which will contain all our spring application event listener logic. We have a function named <code>expensiveThings()</code> , which does something that involves heavy initialization (think network negotiation, I/O bound work etc.) steps and something we want to do pot application startup. Ideal candidates for this scenario might be plugins or utilities that let you interact with third party services like elastic search but that are not absolutely necessary to have when your app is first starting to serve it’s controller endpoints. Inside <code>expensiveThings()</code> we can add something with heavy init. Function <code>bootStrap()</code> is where all the magic takes place. We use the spring <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/event/EventListener.html\" target=\"_blank\" rel=\"noopener\">EventListener</a> which gives us the ability to link any <code>void</code> returning function to an application event, in other words, at runtime spring will proxy the call for that event to be triggered when the registered event is received inside the springboot application context. In our case that is the springs <strong>ApplicationReadyEvent</strong> which gets sent out the first time a spring boot application fully starts up.</p>\n<p>But our job is not done yet, we would like a way to access the initialized variable throughout our application, and we would like to do it in as idiomatic spring way as possible.</p>\n<p>To achieve that we will modify our previous code as follows:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> poststartupVar: String</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">expensiveThings</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        poststartupVar = <span class=\"string\">\"this is just an example\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@EventListener(ApplicationReadyEvent::class)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bootStrap</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        expensiveThings()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>here we’ve modified the class to include a <code>lateinit</code> (if you don’t know, a <a href=\"https://kotlinlang.org/docs/reference/properties.html#late-initialized-properties-and-variables\" target=\"_blank\" rel=\"noopener\">lateinit</a> variable in kotlin is simply a variable that doesn’t need to be initialized at declaration, this makes the code cleaner but you run the risk of an ugly exception if the variable is still initialized at the time of accessing); which then gets instantiated in expensive things. We’ve also marked the class as a configuration object, which makes it a candidate for injection autowring througghout your spring managed beans like Components, Services etc.</p>\n<p>This should get you up an running with a variable that gets initialized post the ApplicationReadyEvent which, if your application has REST controllers, happens post the app starting to listen on those endpoints.</p>\n<p>However, what if this component is a core component and we want to hard exit as soon as possible. </p>\n<p>No problem, as demonstrated below:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EventListener</span>: <span class=\"type\">ApplicationContextAware &#123;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> poststartupVar: String</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> context: ApplicationContext? = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">expensiveThings</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        poststartupVar = <span class=\"string\">\"this is just an example\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@EventListener(ApplicationReadyEvent::class)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bootStrap</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            expensiveThings()</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ex: Exception) &#123;</span><br><span class=\"line\">            panic()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">panic</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> containerContext = <span class=\"keyword\">this</span>.context <span class=\"keyword\">as</span> ConfigurableApplicationContext</span><br><span class=\"line\">        SpringApplication.exit(containerContext)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Here we use the help of <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/ApplicationContext.html\" target=\"_blank\" rel=\"noopener\">ApplicationContext</a> to inject the current running springboot application context in the even listener configuration (more details <a href=\"https://spring.io/understanding/application-context\" target=\"_blank\" rel=\"noopener\">here</a>). In case an exception is encountered in the <code>bootStrap()</code>, the <code>panic()</code> function will be invoked and the spring application will be gracefully exited (the graceful bit depends on your configuration but that’s for another blogpost).</p>\n<h2 id=\"Final-notes\"><a href=\"#Final-notes\" class=\"headerlink\" title=\"Final notes\"></a>Final notes</h2><p>A code very similar to that with some business speicifc sauce is what I used to solve the problem we encountered in the previous section and it brought down the application startup time to less than 15 seconds, which was a major win for a critical production application. Utilizing the APIs and utilities provided by Spring out of the box in my opinion provides the easiest and most convenient way to solve most production problems and is a testament to maturity of Spring and its status as one of the top jvm web framework out there.</p>\n"},{"title":"Hello World","date":"2019-01-08T00:26:16.000Z","_content":"\nObligatory hello world post 🚀\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2019-01-08 11:26:16\n---\n\nObligatory hello world post 🚀\n","slug":"hello-world","published":1,"updated":"2019-08-26T07:04:12.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck50cg3u4000ga4ef0y3fuj2i","content":"<p>Obligatory hello world post 🚀</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Obligatory hello world post 🚀</p>\n"},{"title":"Sending Multipart Form Data Using Spring WebTestClient","date":"2019-04-21T06:52:55.000Z","_content":"\n## Background\n\nFor the past year or so, I have been working extensively with spring, especially spring webflux; building scalable reactive micro services for our customers.\n\nComing from spring MVC, learning webflux and getting used to reactive programming in general has been a great and worthy learning experience and I highly suggest going through the [references](#References) section if you haven’t heard of reactive programming and/or have been thinking about giving it a go and don’t know where to start. But essentially reactive programming involves a model of creating, requesting and manipulating data in a controllable (from a consumers perspective) and non-blocking manner.\n\n[WebTestClient](https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html#webtestclient) is a reactive testing high level http client with fluent assertions, packaged in spring web flux. Recently, while integration testing an application that accepted data as [multipart/form-data](https://tools.ietf.org/html/rfc7578) I had to figure out how to test the data effectively using the webtestclient and personally found the lack of comprehensive resources on the internet lacking, so I wrote this blogpost to share my own learnings.\n\n## Web Form Testing with Webflux\n\nLet’s suppose that we’re trying to send the request to fill a form api that accepts a document (image, text, plain binary etc.) and some textual data.\n\nTo aid with our example, lets imagine the form is a profile setup for an document share service and takes the following input:\n\n- Profile Image (_api label: profileImage_)\n- Username (_api label: username_)\n- Email (_api label: email_)\n- PDF document to share (_api label: userDocument_)\n\nFor us to begin sending the data, we’ll use the spring library called [MultipartBodyBuilder](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/client/MultipartBodyBuilder.html) which provides a nice api for setting up the body for multipart requests.\n\nTo send the first part, the profile image we can set it up as:\n\n```kotlin\nval bodyBuilder = MultipartBodyBuilder()\n\nbodyBuilder.part(\"profileImage\", ClassPathResource(\"test-image.jpg\").file.readBytes()).header(\"Content-Disposition\", \"form-data; name=profileImage; filename=profile-image.jpg\")\n```\n\nTo explain a bit about what’s going on there, we’re simply telling the body builder to upload an image found in `src/test/resources` folder with the name `test-image.jpg` as the profile image part of this body. The real kicker here is setting up the **Header** part as that is what’s used by the webtestclient internals (specifically the [Synchronoss-nio](https://github.com/synchronoss/nio-multipart) library which webflux uses internally) to determine the type of form data being sent and how to process it.\n\nAlso, note that the real file name that will get uploaded in the web server receiving the request is the `profile-image.jpg` filename that gets sent as part of the headers,.\n\nSimilar to the profile image, we can also send the document part of the whole request payload:\n\n```kotlin\nbodyBuilder.part(\"userDocument\", ClassPathResource(\"user-document.pdf\").file.readBytes()).header(\"Content-Disposition\", \"form-data; name=userDocument; filename=my-thesis.pdf\")\n```\n\nSimilar to the previous payload we test the body builder  💪 to read a file in the test resources folder called `user-document.pdf`  as bytes and send the document with the name `my-thesis.pdf` to the form web api. \n\nAs you can already see, compared to some other ways of doing it, such as in this [excellent blog](https://www.baeldung.com/spring-rest-template-multipart-upload) , using the MultipartBodyBuilder is rather conveneient. \n\nNow for the last two remaining pieces of the form api, which are usually only plain text, we can set them up as:\n\n```kotlin\nbodyBuilder.part(\"username\", \"shiveenpandita\", MediaType.TEXT_PLAIN).header(\"Content-Disposition\", \"form-data; name=username\").header(\"Content-type\", \"text/plain\")\n\nbodyBuilder.part(\"email\", \"shiveenpandita@gmail.com\", MediaType.TEXT_PLAIN).header(\"Content-Disposition\", \"form-data; name=email\").header(\"Content-type\", \"text/plain\")\n```\n\nWoohoo! 🎉 We’ve got all our form fields wired now.\n\nNow to see it all in action and bring it all together, we can simply setup a spring integration test and use our freshly setup body builder as:\n\n\n```kotlin\n@RunWith(SpringRunner::class.java)\n@SpringBootTest\n@AutoConfigureWebTestClient\nclass WebClientTest {\n\n    private lateinit var webclient: WebTestClient\n\n    @Test\n    fun `test webform api`() {\n        val bodyBuilder = MultipartBodyBuilder()\n\n        bodyBuilder.part(\"profileImage\", ClassPathResource(\"test-image.jpg\").file.readBytes()).header(\"Content-Disposition\", \"form-data; name=profileImage; filename=profile-image.jpg\")\n\n        bodyBuilder.part(\"userDocument\", ClassPathResource(\"test-document.pdf\").file.readBytes()).header(\"Content-Disposition\", \"form-data; name=userDocument; filename=my-thesis.pdf\")\n\n        bodyBuilder.part(\"username\", \"shiveenpandita\", MediaType.TEXT_PLAIN).header(\"Content-Disposition\", \"form-data; name=username\").header(\"Content-type\", \"text/plain\")\n\n        bodyBuilder.part(\"email\", \"shiveenpandita@gmail.com\", MediaType.TEXT_PLAIN).header(\"Content-Disposition\", \"form-data; name=email\").header(\"Content-type\", \"text/plain\")\n\n        webClient.post()\n            .uri(\"/v1/test-api\")\n            .contentType(MediaType.MULTIPART_FORM_DATA)\n            .body(BodyInserters.fromMultipartData(bodyBuilder.build()))\n            .exchange()\n            .expectStatus().isOk\n    }\n}\n```\n\nThe above code snippet will successfully send the required data to our test api and the webtestclient asserts that the response is 200 OK.\n\n![](https://media.giphy.com/media/l0ErKDci4GgPkcAF2/giphy.gif)\n\n## References\n\n- [Reactive Manifesto](https://www.reactivemanifesto.org/)\n- [Spring Webflux](https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#spring-webflux)\n- [Awesome-List](https://github.com/lucamezzalira/awesome-reactive-programming)\n","source":"_posts/Sending-Multipart-Form-Data-Using-Spring-WebTestClient-md.md","raw":"---\ntitle: Sending Multipart Form Data Using Spring WebTestClient\ndate: 2019-04-21 16:52:55\ntags:\n- springboot\n- spring\n- webflux\n- multipart\n- form\n- data\n- testing\ncategories:\n- tutorial\n---\n\n## Background\n\nFor the past year or so, I have been working extensively with spring, especially spring webflux; building scalable reactive micro services for our customers.\n\nComing from spring MVC, learning webflux and getting used to reactive programming in general has been a great and worthy learning experience and I highly suggest going through the [references](#References) section if you haven’t heard of reactive programming and/or have been thinking about giving it a go and don’t know where to start. But essentially reactive programming involves a model of creating, requesting and manipulating data in a controllable (from a consumers perspective) and non-blocking manner.\n\n[WebTestClient](https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html#webtestclient) is a reactive testing high level http client with fluent assertions, packaged in spring web flux. Recently, while integration testing an application that accepted data as [multipart/form-data](https://tools.ietf.org/html/rfc7578) I had to figure out how to test the data effectively using the webtestclient and personally found the lack of comprehensive resources on the internet lacking, so I wrote this blogpost to share my own learnings.\n\n## Web Form Testing with Webflux\n\nLet’s suppose that we’re trying to send the request to fill a form api that accepts a document (image, text, plain binary etc.) and some textual data.\n\nTo aid with our example, lets imagine the form is a profile setup for an document share service and takes the following input:\n\n- Profile Image (_api label: profileImage_)\n- Username (_api label: username_)\n- Email (_api label: email_)\n- PDF document to share (_api label: userDocument_)\n\nFor us to begin sending the data, we’ll use the spring library called [MultipartBodyBuilder](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/client/MultipartBodyBuilder.html) which provides a nice api for setting up the body for multipart requests.\n\nTo send the first part, the profile image we can set it up as:\n\n```kotlin\nval bodyBuilder = MultipartBodyBuilder()\n\nbodyBuilder.part(\"profileImage\", ClassPathResource(\"test-image.jpg\").file.readBytes()).header(\"Content-Disposition\", \"form-data; name=profileImage; filename=profile-image.jpg\")\n```\n\nTo explain a bit about what’s going on there, we’re simply telling the body builder to upload an image found in `src/test/resources` folder with the name `test-image.jpg` as the profile image part of this body. The real kicker here is setting up the **Header** part as that is what’s used by the webtestclient internals (specifically the [Synchronoss-nio](https://github.com/synchronoss/nio-multipart) library which webflux uses internally) to determine the type of form data being sent and how to process it.\n\nAlso, note that the real file name that will get uploaded in the web server receiving the request is the `profile-image.jpg` filename that gets sent as part of the headers,.\n\nSimilar to the profile image, we can also send the document part of the whole request payload:\n\n```kotlin\nbodyBuilder.part(\"userDocument\", ClassPathResource(\"user-document.pdf\").file.readBytes()).header(\"Content-Disposition\", \"form-data; name=userDocument; filename=my-thesis.pdf\")\n```\n\nSimilar to the previous payload we test the body builder  💪 to read a file in the test resources folder called `user-document.pdf`  as bytes and send the document with the name `my-thesis.pdf` to the form web api. \n\nAs you can already see, compared to some other ways of doing it, such as in this [excellent blog](https://www.baeldung.com/spring-rest-template-multipart-upload) , using the MultipartBodyBuilder is rather conveneient. \n\nNow for the last two remaining pieces of the form api, which are usually only plain text, we can set them up as:\n\n```kotlin\nbodyBuilder.part(\"username\", \"shiveenpandita\", MediaType.TEXT_PLAIN).header(\"Content-Disposition\", \"form-data; name=username\").header(\"Content-type\", \"text/plain\")\n\nbodyBuilder.part(\"email\", \"shiveenpandita@gmail.com\", MediaType.TEXT_PLAIN).header(\"Content-Disposition\", \"form-data; name=email\").header(\"Content-type\", \"text/plain\")\n```\n\nWoohoo! 🎉 We’ve got all our form fields wired now.\n\nNow to see it all in action and bring it all together, we can simply setup a spring integration test and use our freshly setup body builder as:\n\n\n```kotlin\n@RunWith(SpringRunner::class.java)\n@SpringBootTest\n@AutoConfigureWebTestClient\nclass WebClientTest {\n\n    private lateinit var webclient: WebTestClient\n\n    @Test\n    fun `test webform api`() {\n        val bodyBuilder = MultipartBodyBuilder()\n\n        bodyBuilder.part(\"profileImage\", ClassPathResource(\"test-image.jpg\").file.readBytes()).header(\"Content-Disposition\", \"form-data; name=profileImage; filename=profile-image.jpg\")\n\n        bodyBuilder.part(\"userDocument\", ClassPathResource(\"test-document.pdf\").file.readBytes()).header(\"Content-Disposition\", \"form-data; name=userDocument; filename=my-thesis.pdf\")\n\n        bodyBuilder.part(\"username\", \"shiveenpandita\", MediaType.TEXT_PLAIN).header(\"Content-Disposition\", \"form-data; name=username\").header(\"Content-type\", \"text/plain\")\n\n        bodyBuilder.part(\"email\", \"shiveenpandita@gmail.com\", MediaType.TEXT_PLAIN).header(\"Content-Disposition\", \"form-data; name=email\").header(\"Content-type\", \"text/plain\")\n\n        webClient.post()\n            .uri(\"/v1/test-api\")\n            .contentType(MediaType.MULTIPART_FORM_DATA)\n            .body(BodyInserters.fromMultipartData(bodyBuilder.build()))\n            .exchange()\n            .expectStatus().isOk\n    }\n}\n```\n\nThe above code snippet will successfully send the required data to our test api and the webtestclient asserts that the response is 200 OK.\n\n![](https://media.giphy.com/media/l0ErKDci4GgPkcAF2/giphy.gif)\n\n## References\n\n- [Reactive Manifesto](https://www.reactivemanifesto.org/)\n- [Spring Webflux](https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#spring-webflux)\n- [Awesome-List](https://github.com/lucamezzalira/awesome-reactive-programming)\n","slug":"Sending-Multipart-Form-Data-Using-Spring-WebTestClient-md","published":1,"updated":"2019-08-26T07:04:12.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck50cg3u6000ia4efjzyym0ji","content":"<h2 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h2><p>For the past year or so, I have been working extensively with spring, especially spring webflux; building scalable reactive micro services for our customers.</p>\n<p>Coming from spring MVC, learning webflux and getting used to reactive programming in general has been a great and worthy learning experience and I highly suggest going through the <a href=\"#References\">references</a> section if you haven’t heard of reactive programming and/or have been thinking about giving it a go and don’t know where to start. But essentially reactive programming involves a model of creating, requesting and manipulating data in a controllable (from a consumers perspective) and non-blocking manner.</p>\n<p><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html#webtestclient\" target=\"_blank\" rel=\"noopener\">WebTestClient</a> is a reactive testing high level http client with fluent assertions, packaged in spring web flux. Recently, while integration testing an application that accepted data as <a href=\"https://tools.ietf.org/html/rfc7578\" target=\"_blank\" rel=\"noopener\">multipart/form-data</a> I had to figure out how to test the data effectively using the webtestclient and personally found the lack of comprehensive resources on the internet lacking, so I wrote this blogpost to share my own learnings.</p>\n<h2 id=\"Web-Form-Testing-with-Webflux\"><a href=\"#Web-Form-Testing-with-Webflux\" class=\"headerlink\" title=\"Web Form Testing with Webflux\"></a>Web Form Testing with Webflux</h2><p>Let’s suppose that we’re trying to send the request to fill a form api that accepts a document (image, text, plain binary etc.) and some textual data.</p>\n<p>To aid with our example, lets imagine the form is a profile setup for an document share service and takes the following input:</p>\n<ul>\n<li>Profile Image (<em>api label: profileImage</em>)</li>\n<li>Username (<em>api label: username</em>)</li>\n<li>Email (<em>api label: email</em>)</li>\n<li>PDF document to share (<em>api label: userDocument</em>)</li>\n</ul>\n<p>For us to begin sending the data, we’ll use the spring library called <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/client/MultipartBodyBuilder.html\" target=\"_blank\" rel=\"noopener\">MultipartBodyBuilder</a> which provides a nice api for setting up the body for multipart requests.</p>\n<p>To send the first part, the profile image we can set it up as:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> bodyBuilder = MultipartBodyBuilder()</span><br><span class=\"line\"></span><br><span class=\"line\">bodyBuilder.part(<span class=\"string\">\"profileImage\"</span>, ClassPathResource(<span class=\"string\">\"test-image.jpg\"</span>).file.readBytes()).header(<span class=\"string\">\"Content-Disposition\"</span>, <span class=\"string\">\"form-data; name=profileImage; filename=profile-image.jpg\"</span>)</span><br></pre></td></tr></table></figure>\n<p>To explain a bit about what’s going on there, we’re simply telling the body builder to upload an image found in <code>src/test/resources</code> folder with the name <code>test-image.jpg</code> as the profile image part of this body. The real kicker here is setting up the <strong>Header</strong> part as that is what’s used by the webtestclient internals (specifically the <a href=\"https://github.com/synchronoss/nio-multipart\" target=\"_blank\" rel=\"noopener\">Synchronoss-nio</a> library which webflux uses internally) to determine the type of form data being sent and how to process it.</p>\n<p>Also, note that the real file name that will get uploaded in the web server receiving the request is the <code>profile-image.jpg</code> filename that gets sent as part of the headers,.</p>\n<p>Similar to the profile image, we can also send the document part of the whole request payload:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bodyBuilder.part(<span class=\"string\">\"userDocument\"</span>, ClassPathResource(<span class=\"string\">\"user-document.pdf\"</span>).file.readBytes()).header(<span class=\"string\">\"Content-Disposition\"</span>, <span class=\"string\">\"form-data; name=userDocument; filename=my-thesis.pdf\"</span>)</span><br></pre></td></tr></table></figure>\n<p>Similar to the previous payload we test the body builder  💪 to read a file in the test resources folder called <code>user-document.pdf</code>  as bytes and send the document with the name <code>my-thesis.pdf</code> to the form web api. </p>\n<p>As you can already see, compared to some other ways of doing it, such as in this <a href=\"https://www.baeldung.com/spring-rest-template-multipart-upload\" target=\"_blank\" rel=\"noopener\">excellent blog</a> , using the MultipartBodyBuilder is rather conveneient. </p>\n<p>Now for the last two remaining pieces of the form api, which are usually only plain text, we can set them up as:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bodyBuilder.part(<span class=\"string\">\"username\"</span>, <span class=\"string\">\"shiveenpandita\"</span>, MediaType.TEXT_PLAIN).header(<span class=\"string\">\"Content-Disposition\"</span>, <span class=\"string\">\"form-data; name=username\"</span>).header(<span class=\"string\">\"Content-type\"</span>, <span class=\"string\">\"text/plain\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">bodyBuilder.part(<span class=\"string\">\"email\"</span>, <span class=\"string\">\"shiveenpandita@gmail.com\"</span>, MediaType.TEXT_PLAIN).header(<span class=\"string\">\"Content-Disposition\"</span>, <span class=\"string\">\"form-data; name=email\"</span>).header(<span class=\"string\">\"Content-type\"</span>, <span class=\"string\">\"text/plain\"</span>)</span><br></pre></td></tr></table></figure>\n<p>Woohoo! 🎉 We’ve got all our form fields wired now.</p>\n<p>Now to see it all in action and bring it all together, we can simply setup a spring integration test and use our freshly setup body builder as:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(SpringRunner::class.java)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureWebTestClient</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebClientTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> webclient: WebTestClient</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> `test webform api`<span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> bodyBuilder = MultipartBodyBuilder()</span><br><span class=\"line\"></span><br><span class=\"line\">        bodyBuilder.part(<span class=\"string\">\"profileImage\"</span>, ClassPathResource(<span class=\"string\">\"test-image.jpg\"</span>).file.readBytes()).header(<span class=\"string\">\"Content-Disposition\"</span>, <span class=\"string\">\"form-data; name=profileImage; filename=profile-image.jpg\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        bodyBuilder.part(<span class=\"string\">\"userDocument\"</span>, ClassPathResource(<span class=\"string\">\"test-document.pdf\"</span>).file.readBytes()).header(<span class=\"string\">\"Content-Disposition\"</span>, <span class=\"string\">\"form-data; name=userDocument; filename=my-thesis.pdf\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        bodyBuilder.part(<span class=\"string\">\"username\"</span>, <span class=\"string\">\"shiveenpandita\"</span>, MediaType.TEXT_PLAIN).header(<span class=\"string\">\"Content-Disposition\"</span>, <span class=\"string\">\"form-data; name=username\"</span>).header(<span class=\"string\">\"Content-type\"</span>, <span class=\"string\">\"text/plain\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        bodyBuilder.part(<span class=\"string\">\"email\"</span>, <span class=\"string\">\"shiveenpandita@gmail.com\"</span>, MediaType.TEXT_PLAIN).header(<span class=\"string\">\"Content-Disposition\"</span>, <span class=\"string\">\"form-data; name=email\"</span>).header(<span class=\"string\">\"Content-type\"</span>, <span class=\"string\">\"text/plain\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        webClient.post()</span><br><span class=\"line\">            .uri(<span class=\"string\">\"/v1/test-api\"</span>)</span><br><span class=\"line\">            .contentType(MediaType.MULTIPART_FORM_DATA)</span><br><span class=\"line\">            .body(BodyInserters.fromMultipartData(bodyBuilder.build()))</span><br><span class=\"line\">            .exchange()</span><br><span class=\"line\">            .expectStatus().isOk</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The above code snippet will successfully send the required data to our test api and the webtestclient asserts that the response is 200 OK.</p>\n<p><img src=\"https://media.giphy.com/media/l0ErKDci4GgPkcAF2/giphy.gif\" alt></p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://www.reactivemanifesto.org/\" target=\"_blank\" rel=\"noopener\">Reactive Manifesto</a></li>\n<li><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#spring-webflux\" target=\"_blank\" rel=\"noopener\">Spring Webflux</a></li>\n<li><a href=\"https://github.com/lucamezzalira/awesome-reactive-programming\" target=\"_blank\" rel=\"noopener\">Awesome-List</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h2><p>For the past year or so, I have been working extensively with spring, especially spring webflux; building scalable reactive micro services for our customers.</p>\n<p>Coming from spring MVC, learning webflux and getting used to reactive programming in general has been a great and worthy learning experience and I highly suggest going through the <a href=\"#References\">references</a> section if you haven’t heard of reactive programming and/or have been thinking about giving it a go and don’t know where to start. But essentially reactive programming involves a model of creating, requesting and manipulating data in a controllable (from a consumers perspective) and non-blocking manner.</p>\n<p><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html#webtestclient\" target=\"_blank\" rel=\"noopener\">WebTestClient</a> is a reactive testing high level http client with fluent assertions, packaged in spring web flux. Recently, while integration testing an application that accepted data as <a href=\"https://tools.ietf.org/html/rfc7578\" target=\"_blank\" rel=\"noopener\">multipart/form-data</a> I had to figure out how to test the data effectively using the webtestclient and personally found the lack of comprehensive resources on the internet lacking, so I wrote this blogpost to share my own learnings.</p>\n<h2 id=\"Web-Form-Testing-with-Webflux\"><a href=\"#Web-Form-Testing-with-Webflux\" class=\"headerlink\" title=\"Web Form Testing with Webflux\"></a>Web Form Testing with Webflux</h2><p>Let’s suppose that we’re trying to send the request to fill a form api that accepts a document (image, text, plain binary etc.) and some textual data.</p>\n<p>To aid with our example, lets imagine the form is a profile setup for an document share service and takes the following input:</p>\n<ul>\n<li>Profile Image (<em>api label: profileImage</em>)</li>\n<li>Username (<em>api label: username</em>)</li>\n<li>Email (<em>api label: email</em>)</li>\n<li>PDF document to share (<em>api label: userDocument</em>)</li>\n</ul>\n<p>For us to begin sending the data, we’ll use the spring library called <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/client/MultipartBodyBuilder.html\" target=\"_blank\" rel=\"noopener\">MultipartBodyBuilder</a> which provides a nice api for setting up the body for multipart requests.</p>\n<p>To send the first part, the profile image we can set it up as:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> bodyBuilder = MultipartBodyBuilder()</span><br><span class=\"line\"></span><br><span class=\"line\">bodyBuilder.part(<span class=\"string\">\"profileImage\"</span>, ClassPathResource(<span class=\"string\">\"test-image.jpg\"</span>).file.readBytes()).header(<span class=\"string\">\"Content-Disposition\"</span>, <span class=\"string\">\"form-data; name=profileImage; filename=profile-image.jpg\"</span>)</span><br></pre></td></tr></table></figure>\n<p>To explain a bit about what’s going on there, we’re simply telling the body builder to upload an image found in <code>src/test/resources</code> folder with the name <code>test-image.jpg</code> as the profile image part of this body. The real kicker here is setting up the <strong>Header</strong> part as that is what’s used by the webtestclient internals (specifically the <a href=\"https://github.com/synchronoss/nio-multipart\" target=\"_blank\" rel=\"noopener\">Synchronoss-nio</a> library which webflux uses internally) to determine the type of form data being sent and how to process it.</p>\n<p>Also, note that the real file name that will get uploaded in the web server receiving the request is the <code>profile-image.jpg</code> filename that gets sent as part of the headers,.</p>\n<p>Similar to the profile image, we can also send the document part of the whole request payload:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bodyBuilder.part(<span class=\"string\">\"userDocument\"</span>, ClassPathResource(<span class=\"string\">\"user-document.pdf\"</span>).file.readBytes()).header(<span class=\"string\">\"Content-Disposition\"</span>, <span class=\"string\">\"form-data; name=userDocument; filename=my-thesis.pdf\"</span>)</span><br></pre></td></tr></table></figure>\n<p>Similar to the previous payload we test the body builder  💪 to read a file in the test resources folder called <code>user-document.pdf</code>  as bytes and send the document with the name <code>my-thesis.pdf</code> to the form web api. </p>\n<p>As you can already see, compared to some other ways of doing it, such as in this <a href=\"https://www.baeldung.com/spring-rest-template-multipart-upload\" target=\"_blank\" rel=\"noopener\">excellent blog</a> , using the MultipartBodyBuilder is rather conveneient. </p>\n<p>Now for the last two remaining pieces of the form api, which are usually only plain text, we can set them up as:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bodyBuilder.part(<span class=\"string\">\"username\"</span>, <span class=\"string\">\"shiveenpandita\"</span>, MediaType.TEXT_PLAIN).header(<span class=\"string\">\"Content-Disposition\"</span>, <span class=\"string\">\"form-data; name=username\"</span>).header(<span class=\"string\">\"Content-type\"</span>, <span class=\"string\">\"text/plain\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">bodyBuilder.part(<span class=\"string\">\"email\"</span>, <span class=\"string\">\"shiveenpandita@gmail.com\"</span>, MediaType.TEXT_PLAIN).header(<span class=\"string\">\"Content-Disposition\"</span>, <span class=\"string\">\"form-data; name=email\"</span>).header(<span class=\"string\">\"Content-type\"</span>, <span class=\"string\">\"text/plain\"</span>)</span><br></pre></td></tr></table></figure>\n<p>Woohoo! 🎉 We’ve got all our form fields wired now.</p>\n<p>Now to see it all in action and bring it all together, we can simply setup a spring integration test and use our freshly setup body builder as:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(SpringRunner::class.java)</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureWebTestClient</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebClientTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> webclient: WebTestClient</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> `test webform api`<span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> bodyBuilder = MultipartBodyBuilder()</span><br><span class=\"line\"></span><br><span class=\"line\">        bodyBuilder.part(<span class=\"string\">\"profileImage\"</span>, ClassPathResource(<span class=\"string\">\"test-image.jpg\"</span>).file.readBytes()).header(<span class=\"string\">\"Content-Disposition\"</span>, <span class=\"string\">\"form-data; name=profileImage; filename=profile-image.jpg\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        bodyBuilder.part(<span class=\"string\">\"userDocument\"</span>, ClassPathResource(<span class=\"string\">\"test-document.pdf\"</span>).file.readBytes()).header(<span class=\"string\">\"Content-Disposition\"</span>, <span class=\"string\">\"form-data; name=userDocument; filename=my-thesis.pdf\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        bodyBuilder.part(<span class=\"string\">\"username\"</span>, <span class=\"string\">\"shiveenpandita\"</span>, MediaType.TEXT_PLAIN).header(<span class=\"string\">\"Content-Disposition\"</span>, <span class=\"string\">\"form-data; name=username\"</span>).header(<span class=\"string\">\"Content-type\"</span>, <span class=\"string\">\"text/plain\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        bodyBuilder.part(<span class=\"string\">\"email\"</span>, <span class=\"string\">\"shiveenpandita@gmail.com\"</span>, MediaType.TEXT_PLAIN).header(<span class=\"string\">\"Content-Disposition\"</span>, <span class=\"string\">\"form-data; name=email\"</span>).header(<span class=\"string\">\"Content-type\"</span>, <span class=\"string\">\"text/plain\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        webClient.post()</span><br><span class=\"line\">            .uri(<span class=\"string\">\"/v1/test-api\"</span>)</span><br><span class=\"line\">            .contentType(MediaType.MULTIPART_FORM_DATA)</span><br><span class=\"line\">            .body(BodyInserters.fromMultipartData(bodyBuilder.build()))</span><br><span class=\"line\">            .exchange()</span><br><span class=\"line\">            .expectStatus().isOk</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The above code snippet will successfully send the required data to our test api and the webtestclient asserts that the response is 200 OK.</p>\n<p><img src=\"https://media.giphy.com/media/l0ErKDci4GgPkcAF2/giphy.gif\" alt></p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://www.reactivemanifesto.org/\" target=\"_blank\" rel=\"noopener\">Reactive Manifesto</a></li>\n<li><a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#spring-webflux\" target=\"_blank\" rel=\"noopener\">Spring Webflux</a></li>\n<li><a href=\"https://github.com/lucamezzalira/awesome-reactive-programming\" target=\"_blank\" rel=\"noopener\">Awesome-List</a></li>\n</ul>\n"},{"title":"Introducing Bows3r - A Small S3 Browser in Pure Kotlin","date":"2019-07-29T09:52:50.000Z","_content":"\n## Background\n\nRecently I found myself with some extra development time on hand. Now usually, most of my projects start off as big grand ideas and as soon as I start working on them, I lose steam or life comes in the way and things just sit their eating dust as a private github repo.\n\n     \nHowever, I stumbled upon [Kweb](https://github.com/kwebio/kweb-core) which is a server side rendered web app building library, but written entirely in Kotlin. Kweb provides a nice [dsl](https://en.wikipedia.org/wiki/Domain-specific_language) like interface to build web apps by programmatically defining the html elements for the app instead of writing the html and CSS by hand. For those who don't know, Kotlin provides a really nice way to build [type safe declarative builders](https://kotlinlang.org/docs/reference/type-safe-builders.html).\n \n Since it's all created declarative in the kotlin code, we get access coroutines, extensions and all the nice things that make working with Kotlin such a joy. For those of you who have worked with pure code based server side rendered frameworks before, this might remind you of [Vaadin](https://vaadin.com/) which is an industry leader in its space, but there are subtle and not so subtle differences which you can be found on the [Kweb FAQS](http://docs.kweb.io/en/latest/faq.html).\n\nGoing through their codebase, I though it would be a really good opportunity to try and a build a quick and easy app by just using pure kotlin. Why you ask? Cause it was quick and I could smash it out in a few hours.\n\n## Simple Kotlin S3 Client\n\nTo start off, I wrote a basic S3 browsing class, starting off small - I copied the code from AWS examples on creating a new S3 client and then added the ability to search for all public keys in a given bucket and get some metadata and download links:\n\n```kotlin\nclass S3Client(private val endpoint: String, private val bucketName: String) {\n\n\n    private val client = AmazonS3ClientBuilder.standard()\n        .withPathStyleAccessEnabled(true)\n        .withEndpointConfiguration(AwsClientBuilder.EndpointConfiguration(endpoint, \"ap-southeast-2\"))\n        .build()\n\n    fun listAllKeys(): List<S3Data> {\n        val req = ListObjectsV2Request().withBucketName(bucketName).withMaxKeys(10)\n        val keyList = mutableListOf<S3Data>()\n        client.listObjectsV2(req).objectSummaries.forEach {\n            keyList.add(S3Data(it.key, \"$endpoint/$bucketName/${it.key}\", it.size.toString().toDouble() / 1000.0, it.lastModified.toString()))\n        }\n        return keyList\n    }\n}\n```\n\nthe `listAllKeys()` functions returns a list of all keys in that given bucket, which I can then map to a custom S3Data class:\n\n```kotlin\ndata class S3Data(\n    val key: String,\n    val downloadUrl: String,\n    val size: Double,\n    val lastModifiedAt: String\n)\n```\n\n## Building the UI with Kweb\n\nOnce done, I got cracking on the UI interface. I wanted something quick and simple, crude even, just to demonstrate that it all works as proposed. So I setup a container with some form fields, a search button and a table to input the S3 region link and the name of the bucket. \n\nI also needed a table to display all the keys (sans pagination, who builds pagination in PoCs anyway? 🤠). To enable holding the data, I used something called [KVAR](https://github.com/kwebio/kweb-core/blob/master/src/main/kotlin/io/kweb/state/KVar.kt) which is simply a state store used by Kweb to support propagating state changes to the web app via [Observer Pattern](https://en.wikipedia.org/wiki/Observer_pattern). \n\nThe following code fragment gets the initialises the S3 data Kvar (setup as an empty list initially) - which eventually propagates it to the table:\n\n```kotlin\ndiv(fomantic.ui.main.container).new {\n    div(fomantic.ui.vertical.segment).new {\n        div(fomantic.ui.header).text(\"Welcome to S3 Browser 💻\")\n    }\n\n    val keyData = KVar(emptyList<S3Data>())\n\n    val loader = div(mapOf(\"class\" to \"ui active text loader\")).addText(\"Retrieving keys...\")\n    loader.setAttribute(\"class\", \"ui disabled text loader\")\n    createInputSegment(loader, keyData)\n    createKeysTable(keyData)\n}\n```\n\nNow, here is where Kwebs deep integration with kotlin really comes in handy, since it allows us to use [kotlin coroutines](https://kotlinlang.org/docs/reference/coroutines-overview.html) to handle tasks with considerable i/o (such as retrieving data from an AWS bucket). I have recently started using coroutines frequently in production code and I can without doubt say they're the best way to write asynchronous tasks without worrying about threads. The low touch syntax setup and the results are so easy it almost feels like cheating.\n\nThe following code fragment uses the `S3Client` introduced earlier to launch a coroutine and when the user hits the search button, and displays a loading icon until all the data is retrieved or an error is thrown:\n\n```kotlin\nprivate fun ElementCreator<DivElement>.createInputSegment(\n    loader: Element,\n    keyData: KVar<List<S3Data>>\n) {\n    div(fomantic.ui.vertical.segment).new {\n        div(fomantic.ui.input).new {\n            val endpointInput = input(type = InputType.text, placeholder = \"Enter S3 Endpoint Url\")\n            val bucketInput = input(type = InputType.text, placeholder = \"Enter S3 Bucket Name\")\n            button(mapOf(\"class\" to \"ui primary button\")).text(\"Search\").on.click {\n                GlobalScope.launch {\n                    loader.setAttribute(\"class\", \"ui active text loader\")\n                    val s3Client =\n                        S3Client(endpointInput.getValue().await(), bucketInput.getValue().await())\n                    try {\n                        keyData.value = s3Client.listAllKeys()\n                    } catch (ex: Exception) {\n                        p().execute(ERROR_TOAST)\n                        loader.setAttribute(\"class\", \"ui disabled text loader\")\n                    }\n                    if (keyData.value.isNotEmpty()) {\n                        p().execute(SUCCESS_TOAST)\n                        loader.setAttribute(\"class\", \"ui disabled text loader\")\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\nSo far so good, now that we have successfully pulled in the data in out Kvar container, we can start rendering a table. Now I also wanted to show a nice little icon to show that the retrieved object was a file - and also allow the ability to click name of the key as a link so the user can download.\n\nNow Kweb as far as I could tell didn't have the ability to specify that via a DSL object, however, it does provide the ability to specify nested HTML inside a table element to add my own custom behaviour. \n\n```kotlin\nprivate fun ElementCreator<DivElement>.createKeysTable(\n    keyData: KVar<List<S3Data>>\n) {\n    table(mapOf(\"class\" to \"ui celled striped table\")).new {\n        thead().new {\n            tr().new {\n                th().text(\"Key\")\n                th().text(\"File Size (in KB)\")\n                th().text(\"Last Modified At\")\n            }\n        }\n        tbody().new {\n            keyData.map {\n                it.forEach {\n                    tr().new {\n                        td(mapOf(\"data-lable\" to \"Key\")).innerHTML(\"<i class=\\\"file outline icon\\\"></i> <a target=\\\"_blank\\\" href=${it.downloadUrl} download=${it.key}>${it.key}</a>\")\n                        td(mapOf(\"data-lable\" to \"File Size\")).text(\"${it.size} KB\")\n                        td(mapOf(\"data-lable\" to \"Last Modified At\")).text(it.lastModifiedAt)\n\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\nThe code above creates a new table and generates a new row in the table for each public key present in the provided bucket. If no data is present, nothing gets rendered. \n\nThis probably also the time to give a shoutout to the Kweb creators for an integration with [Fomantic UI](https://fomantic-ui.com/) which comes pre-configured with nice UI elements. Although, the integration doesn't end there and there is a nice APi for anyone to write a new plugin with their favourite UI elements library. \n\n## Final Notes\n\nAnd that is all that's needed to write a simple S3 browsing web app using Kweb. [Here](https://secure-scrubland-34237.herokuapp.com/) is the app deployed on heroku and the full working code is on [github](https://github.com/shavz/Bows3r). \n\nGif Demo:\n                                                                                \n![](https://imgur.com/YoJdUxj.gif)\n\nYoutube Demo:\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/0soMtA2vUSo\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n","source":"_posts/S3-Browser-With-Kweb.md","raw":"---\ntitle: Introducing Bows3r - A Small S3 Browser in Pure Kotlin \ndate: 2019-07-29 19:52:50\ntags: \n- ssr\n- kweb\n- server-side-rendering\n- web-application\n- pure-kotlin\n---\n\n## Background\n\nRecently I found myself with some extra development time on hand. Now usually, most of my projects start off as big grand ideas and as soon as I start working on them, I lose steam or life comes in the way and things just sit their eating dust as a private github repo.\n\n     \nHowever, I stumbled upon [Kweb](https://github.com/kwebio/kweb-core) which is a server side rendered web app building library, but written entirely in Kotlin. Kweb provides a nice [dsl](https://en.wikipedia.org/wiki/Domain-specific_language) like interface to build web apps by programmatically defining the html elements for the app instead of writing the html and CSS by hand. For those who don't know, Kotlin provides a really nice way to build [type safe declarative builders](https://kotlinlang.org/docs/reference/type-safe-builders.html).\n \n Since it's all created declarative in the kotlin code, we get access coroutines, extensions and all the nice things that make working with Kotlin such a joy. For those of you who have worked with pure code based server side rendered frameworks before, this might remind you of [Vaadin](https://vaadin.com/) which is an industry leader in its space, but there are subtle and not so subtle differences which you can be found on the [Kweb FAQS](http://docs.kweb.io/en/latest/faq.html).\n\nGoing through their codebase, I though it would be a really good opportunity to try and a build a quick and easy app by just using pure kotlin. Why you ask? Cause it was quick and I could smash it out in a few hours.\n\n## Simple Kotlin S3 Client\n\nTo start off, I wrote a basic S3 browsing class, starting off small - I copied the code from AWS examples on creating a new S3 client and then added the ability to search for all public keys in a given bucket and get some metadata and download links:\n\n```kotlin\nclass S3Client(private val endpoint: String, private val bucketName: String) {\n\n\n    private val client = AmazonS3ClientBuilder.standard()\n        .withPathStyleAccessEnabled(true)\n        .withEndpointConfiguration(AwsClientBuilder.EndpointConfiguration(endpoint, \"ap-southeast-2\"))\n        .build()\n\n    fun listAllKeys(): List<S3Data> {\n        val req = ListObjectsV2Request().withBucketName(bucketName).withMaxKeys(10)\n        val keyList = mutableListOf<S3Data>()\n        client.listObjectsV2(req).objectSummaries.forEach {\n            keyList.add(S3Data(it.key, \"$endpoint/$bucketName/${it.key}\", it.size.toString().toDouble() / 1000.0, it.lastModified.toString()))\n        }\n        return keyList\n    }\n}\n```\n\nthe `listAllKeys()` functions returns a list of all keys in that given bucket, which I can then map to a custom S3Data class:\n\n```kotlin\ndata class S3Data(\n    val key: String,\n    val downloadUrl: String,\n    val size: Double,\n    val lastModifiedAt: String\n)\n```\n\n## Building the UI with Kweb\n\nOnce done, I got cracking on the UI interface. I wanted something quick and simple, crude even, just to demonstrate that it all works as proposed. So I setup a container with some form fields, a search button and a table to input the S3 region link and the name of the bucket. \n\nI also needed a table to display all the keys (sans pagination, who builds pagination in PoCs anyway? 🤠). To enable holding the data, I used something called [KVAR](https://github.com/kwebio/kweb-core/blob/master/src/main/kotlin/io/kweb/state/KVar.kt) which is simply a state store used by Kweb to support propagating state changes to the web app via [Observer Pattern](https://en.wikipedia.org/wiki/Observer_pattern). \n\nThe following code fragment gets the initialises the S3 data Kvar (setup as an empty list initially) - which eventually propagates it to the table:\n\n```kotlin\ndiv(fomantic.ui.main.container).new {\n    div(fomantic.ui.vertical.segment).new {\n        div(fomantic.ui.header).text(\"Welcome to S3 Browser 💻\")\n    }\n\n    val keyData = KVar(emptyList<S3Data>())\n\n    val loader = div(mapOf(\"class\" to \"ui active text loader\")).addText(\"Retrieving keys...\")\n    loader.setAttribute(\"class\", \"ui disabled text loader\")\n    createInputSegment(loader, keyData)\n    createKeysTable(keyData)\n}\n```\n\nNow, here is where Kwebs deep integration with kotlin really comes in handy, since it allows us to use [kotlin coroutines](https://kotlinlang.org/docs/reference/coroutines-overview.html) to handle tasks with considerable i/o (such as retrieving data from an AWS bucket). I have recently started using coroutines frequently in production code and I can without doubt say they're the best way to write asynchronous tasks without worrying about threads. The low touch syntax setup and the results are so easy it almost feels like cheating.\n\nThe following code fragment uses the `S3Client` introduced earlier to launch a coroutine and when the user hits the search button, and displays a loading icon until all the data is retrieved or an error is thrown:\n\n```kotlin\nprivate fun ElementCreator<DivElement>.createInputSegment(\n    loader: Element,\n    keyData: KVar<List<S3Data>>\n) {\n    div(fomantic.ui.vertical.segment).new {\n        div(fomantic.ui.input).new {\n            val endpointInput = input(type = InputType.text, placeholder = \"Enter S3 Endpoint Url\")\n            val bucketInput = input(type = InputType.text, placeholder = \"Enter S3 Bucket Name\")\n            button(mapOf(\"class\" to \"ui primary button\")).text(\"Search\").on.click {\n                GlobalScope.launch {\n                    loader.setAttribute(\"class\", \"ui active text loader\")\n                    val s3Client =\n                        S3Client(endpointInput.getValue().await(), bucketInput.getValue().await())\n                    try {\n                        keyData.value = s3Client.listAllKeys()\n                    } catch (ex: Exception) {\n                        p().execute(ERROR_TOAST)\n                        loader.setAttribute(\"class\", \"ui disabled text loader\")\n                    }\n                    if (keyData.value.isNotEmpty()) {\n                        p().execute(SUCCESS_TOAST)\n                        loader.setAttribute(\"class\", \"ui disabled text loader\")\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\nSo far so good, now that we have successfully pulled in the data in out Kvar container, we can start rendering a table. Now I also wanted to show a nice little icon to show that the retrieved object was a file - and also allow the ability to click name of the key as a link so the user can download.\n\nNow Kweb as far as I could tell didn't have the ability to specify that via a DSL object, however, it does provide the ability to specify nested HTML inside a table element to add my own custom behaviour. \n\n```kotlin\nprivate fun ElementCreator<DivElement>.createKeysTable(\n    keyData: KVar<List<S3Data>>\n) {\n    table(mapOf(\"class\" to \"ui celled striped table\")).new {\n        thead().new {\n            tr().new {\n                th().text(\"Key\")\n                th().text(\"File Size (in KB)\")\n                th().text(\"Last Modified At\")\n            }\n        }\n        tbody().new {\n            keyData.map {\n                it.forEach {\n                    tr().new {\n                        td(mapOf(\"data-lable\" to \"Key\")).innerHTML(\"<i class=\\\"file outline icon\\\"></i> <a target=\\\"_blank\\\" href=${it.downloadUrl} download=${it.key}>${it.key}</a>\")\n                        td(mapOf(\"data-lable\" to \"File Size\")).text(\"${it.size} KB\")\n                        td(mapOf(\"data-lable\" to \"Last Modified At\")).text(it.lastModifiedAt)\n\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\nThe code above creates a new table and generates a new row in the table for each public key present in the provided bucket. If no data is present, nothing gets rendered. \n\nThis probably also the time to give a shoutout to the Kweb creators for an integration with [Fomantic UI](https://fomantic-ui.com/) which comes pre-configured with nice UI elements. Although, the integration doesn't end there and there is a nice APi for anyone to write a new plugin with their favourite UI elements library. \n\n## Final Notes\n\nAnd that is all that's needed to write a simple S3 browsing web app using Kweb. [Here](https://secure-scrubland-34237.herokuapp.com/) is the app deployed on heroku and the full working code is on [github](https://github.com/shavz/Bows3r). \n\nGif Demo:\n                                                                                \n![](https://imgur.com/YoJdUxj.gif)\n\nYoutube Demo:\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/0soMtA2vUSo\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n","slug":"S3-Browser-With-Kweb","published":1,"updated":"2019-12-18T11:41:53.848Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck50cg3uz0010a4efz2fgqmdl","content":"<h2 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h2><p>Recently I found myself with some extra development time on hand. Now usually, most of my projects start off as big grand ideas and as soon as I start working on them, I lose steam or life comes in the way and things just sit their eating dust as a private github repo.</p>\n<p>However, I stumbled upon <a href=\"https://github.com/kwebio/kweb-core\" target=\"_blank\" rel=\"noopener\">Kweb</a> which is a server side rendered web app building library, but written entirely in Kotlin. Kweb provides a nice <a href=\"https://en.wikipedia.org/wiki/Domain-specific_language\" target=\"_blank\" rel=\"noopener\">dsl</a> like interface to build web apps by programmatically defining the html elements for the app instead of writing the html and CSS by hand. For those who don’t know, Kotlin provides a really nice way to build <a href=\"https://kotlinlang.org/docs/reference/type-safe-builders.html\" target=\"_blank\" rel=\"noopener\">type safe declarative builders</a>.</p>\n<p> Since it’s all created declarative in the kotlin code, we get access coroutines, extensions and all the nice things that make working with Kotlin such a joy. For those of you who have worked with pure code based server side rendered frameworks before, this might remind you of <a href=\"https://vaadin.com/\" target=\"_blank\" rel=\"noopener\">Vaadin</a> which is an industry leader in its space, but there are subtle and not so subtle differences which you can be found on the <a href=\"http://docs.kweb.io/en/latest/faq.html\" target=\"_blank\" rel=\"noopener\">Kweb FAQS</a>.</p>\n<p>Going through their codebase, I though it would be a really good opportunity to try and a build a quick and easy app by just using pure kotlin. Why you ask? Cause it was quick and I could smash it out in a few hours.</p>\n<h2 id=\"Simple-Kotlin-S3-Client\"><a href=\"#Simple-Kotlin-S3-Client\" class=\"headerlink\" title=\"Simple Kotlin S3 Client\"></a>Simple Kotlin S3 Client</h2><p>To start off, I wrote a basic S3 browsing class, starting off small - I copied the code from AWS examples on creating a new S3 client and then added the ability to search for all public keys in a given bucket and get some metadata and download links:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">S3Client</span></span>(<span class=\"keyword\">private</span> <span class=\"keyword\">val</span> endpoint: String, <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> bucketName: String) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> client = AmazonS3ClientBuilder.standard()</span><br><span class=\"line\">        .withPathStyleAccessEnabled(<span class=\"literal\">true</span>)</span><br><span class=\"line\">        .withEndpointConfiguration(AwsClientBuilder.EndpointConfiguration(endpoint, <span class=\"string\">\"ap-southeast-2\"</span>))</span><br><span class=\"line\">        .build()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">listAllKeys</span><span class=\"params\">()</span></span>: List&lt;S3Data&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> req = ListObjectsV2Request().withBucketName(bucketName).withMaxKeys(<span class=\"number\">10</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> keyList = mutableListOf&lt;S3Data&gt;()</span><br><span class=\"line\">        client.listObjectsV2(req).objectSummaries.forEach &#123;</span><br><span class=\"line\">            keyList.add(S3Data(it.key, <span class=\"string\">\"<span class=\"variable\">$endpoint</span>/<span class=\"variable\">$bucketName</span>/<span class=\"subst\">$&#123;it.key&#125;</span>\"</span>, it.size.toString().toDouble() / <span class=\"number\">1000.0</span>, it.lastModified.toString()))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keyList</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>the <code>listAllKeys()</code> functions returns a list of all keys in that given bucket, which I can then map to a custom S3Data class:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">S3Data</span></span>(</span><br><span class=\"line\">    <span class=\"keyword\">val</span> key: String,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> downloadUrl: String,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> size: <span class=\"built_in\">Double</span>,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> lastModifiedAt: String</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Building-the-UI-with-Kweb\"><a href=\"#Building-the-UI-with-Kweb\" class=\"headerlink\" title=\"Building the UI with Kweb\"></a>Building the UI with Kweb</h2><p>Once done, I got cracking on the UI interface. I wanted something quick and simple, crude even, just to demonstrate that it all works as proposed. So I setup a container with some form fields, a search button and a table to input the S3 region link and the name of the bucket. </p>\n<p>I also needed a table to display all the keys (sans pagination, who builds pagination in PoCs anyway? 🤠). To enable holding the data, I used something called <a href=\"https://github.com/kwebio/kweb-core/blob/master/src/main/kotlin/io/kweb/state/KVar.kt\" target=\"_blank\" rel=\"noopener\">KVAR</a> which is simply a state store used by Kweb to support propagating state changes to the web app via <a href=\"https://en.wikipedia.org/wiki/Observer_pattern\" target=\"_blank\" rel=\"noopener\">Observer Pattern</a>. </p>\n<p>The following code fragment gets the initialises the S3 data Kvar (setup as an empty list initially) - which eventually propagates it to the table:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div(fomantic.ui.main.container).new &#123;</span><br><span class=\"line\">    div(fomantic.ui.vertical.segment).new &#123;</span><br><span class=\"line\">        div(fomantic.ui.header).text(<span class=\"string\">\"Welcome to S3 Browser 💻\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> keyData = KVar(emptyList&lt;S3Data&gt;())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> loader = div(mapOf(<span class=\"string\">\"class\"</span> to <span class=\"string\">\"ui active text loader\"</span>)).addText(<span class=\"string\">\"Retrieving keys...\"</span>)</span><br><span class=\"line\">    loader.setAttribute(<span class=\"string\">\"class\"</span>, <span class=\"string\">\"ui disabled text loader\"</span>)</span><br><span class=\"line\">    createInputSegment(loader, keyData)</span><br><span class=\"line\">    createKeysTable(keyData)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Now, here is where Kwebs deep integration with kotlin really comes in handy, since it allows us to use <a href=\"https://kotlinlang.org/docs/reference/coroutines-overview.html\" target=\"_blank\" rel=\"noopener\">kotlin coroutines</a> to handle tasks with considerable i/o (such as retrieving data from an AWS bucket). I have recently started using coroutines frequently in production code and I can without doubt say they’re the best way to write asynchronous tasks without worrying about threads. The low touch syntax setup and the results are so easy it almost feels like cheating.</p>\n<p>The following code fragment uses the <code>S3Client</code> introduced earlier to launch a coroutine and when the user hits the search button, and displays a loading icon until all the data is retrieved or an error is thrown:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> ElementCreator<span class=\"type\">&lt;DivElement&gt;</span>.<span class=\"title\">createInputSegment</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    loader: <span class=\"type\">Element</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    keyData: <span class=\"type\">KVar</span>&lt;<span class=\"type\">List</span>&lt;<span class=\"type\">S3Data</span>&gt;&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">)</span></span> &#123;</span><br><span class=\"line\">    div(fomantic.ui.vertical.segment).new &#123;</span><br><span class=\"line\">        div(fomantic.ui.input).new &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> endpointInput = input(type = InputType.text, placeholder = <span class=\"string\">\"Enter S3 Endpoint Url\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">val</span> bucketInput = input(type = InputType.text, placeholder = <span class=\"string\">\"Enter S3 Bucket Name\"</span>)</span><br><span class=\"line\">            button(mapOf(<span class=\"string\">\"class\"</span> to <span class=\"string\">\"ui primary button\"</span>)).text(<span class=\"string\">\"Search\"</span>).on.click &#123;</span><br><span class=\"line\">                GlobalScope.launch &#123;</span><br><span class=\"line\">                    loader.setAttribute(<span class=\"string\">\"class\"</span>, <span class=\"string\">\"ui active text loader\"</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">val</span> s3Client =</span><br><span class=\"line\">                        S3Client(endpointInput.getValue().await(), bucketInput.getValue().await())</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        keyData.value = s3Client.listAllKeys()</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (ex: Exception) &#123;</span><br><span class=\"line\">                        p().execute(ERROR_TOAST)</span><br><span class=\"line\">                        loader.setAttribute(<span class=\"string\">\"class\"</span>, <span class=\"string\">\"ui disabled text loader\"</span>)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (keyData.value.isNotEmpty()) &#123;</span><br><span class=\"line\">                        p().execute(SUCCESS_TOAST)</span><br><span class=\"line\">                        loader.setAttribute(<span class=\"string\">\"class\"</span>, <span class=\"string\">\"ui disabled text loader\"</span>)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>So far so good, now that we have successfully pulled in the data in out Kvar container, we can start rendering a table. Now I also wanted to show a nice little icon to show that the retrieved object was a file - and also allow the ability to click name of the key as a link so the user can download.</p>\n<p>Now Kweb as far as I could tell didn’t have the ability to specify that via a DSL object, however, it does provide the ability to specify nested HTML inside a table element to add my own custom behaviour. </p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> ElementCreator<span class=\"type\">&lt;DivElement&gt;</span>.<span class=\"title\">createKeysTable</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    keyData: <span class=\"type\">KVar</span>&lt;<span class=\"type\">List</span>&lt;<span class=\"type\">S3Data</span>&gt;&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">)</span></span> &#123;</span><br><span class=\"line\">    table(mapOf(<span class=\"string\">\"class\"</span> to <span class=\"string\">\"ui celled striped table\"</span>)).new &#123;</span><br><span class=\"line\">        thead().new &#123;</span><br><span class=\"line\">            tr().new &#123;</span><br><span class=\"line\">                th().text(<span class=\"string\">\"Key\"</span>)</span><br><span class=\"line\">                th().text(<span class=\"string\">\"File Size (in KB)\"</span>)</span><br><span class=\"line\">                th().text(<span class=\"string\">\"Last Modified At\"</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tbody().new &#123;</span><br><span class=\"line\">            keyData.map &#123;</span><br><span class=\"line\">                it.forEach &#123;</span><br><span class=\"line\">                    tr().new &#123;</span><br><span class=\"line\">                        td(mapOf(<span class=\"string\">\"data-lable\"</span> to <span class=\"string\">\"Key\"</span>)).innerHTML(<span class=\"string\">\"&lt;i class=\\\"file outline icon\\\"&gt;&lt;/i&gt; &lt;a target=\\\"_blank\\\" href=<span class=\"subst\">$&#123;it.downloadUrl&#125;</span> download=<span class=\"subst\">$&#123;it.key&#125;</span>&gt;<span class=\"subst\">$&#123;it.key&#125;</span>&lt;/a&gt;\"</span>)</span><br><span class=\"line\">                        td(mapOf(<span class=\"string\">\"data-lable\"</span> to <span class=\"string\">\"File Size\"</span>)).text(<span class=\"string\">\"<span class=\"subst\">$&#123;it.size&#125;</span> KB\"</span>)</span><br><span class=\"line\">                        td(mapOf(<span class=\"string\">\"data-lable\"</span> to <span class=\"string\">\"Last Modified At\"</span>)).text(it.lastModifiedAt)</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The code above creates a new table and generates a new row in the table for each public key present in the provided bucket. If no data is present, nothing gets rendered. </p>\n<p>This probably also the time to give a shoutout to the Kweb creators for an integration with <a href=\"https://fomantic-ui.com/\" target=\"_blank\" rel=\"noopener\">Fomantic UI</a> which comes pre-configured with nice UI elements. Although, the integration doesn’t end there and there is a nice APi for anyone to write a new plugin with their favourite UI elements library. </p>\n<h2 id=\"Final-Notes\"><a href=\"#Final-Notes\" class=\"headerlink\" title=\"Final Notes\"></a>Final Notes</h2><p>And that is all that’s needed to write a simple S3 browsing web app using Kweb. <a href=\"https://secure-scrubland-34237.herokuapp.com/\" target=\"_blank\" rel=\"noopener\">Here</a> is the app deployed on heroku and the full working code is on <a href=\"https://github.com/shavz/Bows3r\" target=\"_blank\" rel=\"noopener\">github</a>. </p>\n<p>Gif Demo:</p>\n<p><img src=\"https://imgur.com/YoJdUxj.gif\" alt></p>\n<p>Youtube Demo:</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/0soMtA2vUSo\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Background\"><a href=\"#Background\" class=\"headerlink\" title=\"Background\"></a>Background</h2><p>Recently I found myself with some extra development time on hand. Now usually, most of my projects start off as big grand ideas and as soon as I start working on them, I lose steam or life comes in the way and things just sit their eating dust as a private github repo.</p>\n<p>However, I stumbled upon <a href=\"https://github.com/kwebio/kweb-core\" target=\"_blank\" rel=\"noopener\">Kweb</a> which is a server side rendered web app building library, but written entirely in Kotlin. Kweb provides a nice <a href=\"https://en.wikipedia.org/wiki/Domain-specific_language\" target=\"_blank\" rel=\"noopener\">dsl</a> like interface to build web apps by programmatically defining the html elements for the app instead of writing the html and CSS by hand. For those who don’t know, Kotlin provides a really nice way to build <a href=\"https://kotlinlang.org/docs/reference/type-safe-builders.html\" target=\"_blank\" rel=\"noopener\">type safe declarative builders</a>.</p>\n<p> Since it’s all created declarative in the kotlin code, we get access coroutines, extensions and all the nice things that make working with Kotlin such a joy. For those of you who have worked with pure code based server side rendered frameworks before, this might remind you of <a href=\"https://vaadin.com/\" target=\"_blank\" rel=\"noopener\">Vaadin</a> which is an industry leader in its space, but there are subtle and not so subtle differences which you can be found on the <a href=\"http://docs.kweb.io/en/latest/faq.html\" target=\"_blank\" rel=\"noopener\">Kweb FAQS</a>.</p>\n<p>Going through their codebase, I though it would be a really good opportunity to try and a build a quick and easy app by just using pure kotlin. Why you ask? Cause it was quick and I could smash it out in a few hours.</p>\n<h2 id=\"Simple-Kotlin-S3-Client\"><a href=\"#Simple-Kotlin-S3-Client\" class=\"headerlink\" title=\"Simple Kotlin S3 Client\"></a>Simple Kotlin S3 Client</h2><p>To start off, I wrote a basic S3 browsing class, starting off small - I copied the code from AWS examples on creating a new S3 client and then added the ability to search for all public keys in a given bucket and get some metadata and download links:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">S3Client</span></span>(<span class=\"keyword\">private</span> <span class=\"keyword\">val</span> endpoint: String, <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> bucketName: String) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> client = AmazonS3ClientBuilder.standard()</span><br><span class=\"line\">        .withPathStyleAccessEnabled(<span class=\"literal\">true</span>)</span><br><span class=\"line\">        .withEndpointConfiguration(AwsClientBuilder.EndpointConfiguration(endpoint, <span class=\"string\">\"ap-southeast-2\"</span>))</span><br><span class=\"line\">        .build()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">listAllKeys</span><span class=\"params\">()</span></span>: List&lt;S3Data&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> req = ListObjectsV2Request().withBucketName(bucketName).withMaxKeys(<span class=\"number\">10</span>)</span><br><span class=\"line\">        <span class=\"keyword\">val</span> keyList = mutableListOf&lt;S3Data&gt;()</span><br><span class=\"line\">        client.listObjectsV2(req).objectSummaries.forEach &#123;</span><br><span class=\"line\">            keyList.add(S3Data(it.key, <span class=\"string\">\"<span class=\"variable\">$endpoint</span>/<span class=\"variable\">$bucketName</span>/<span class=\"subst\">$&#123;it.key&#125;</span>\"</span>, it.size.toString().toDouble() / <span class=\"number\">1000.0</span>, it.lastModified.toString()))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keyList</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>the <code>listAllKeys()</code> functions returns a list of all keys in that given bucket, which I can then map to a custom S3Data class:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">S3Data</span></span>(</span><br><span class=\"line\">    <span class=\"keyword\">val</span> key: String,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> downloadUrl: String,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> size: <span class=\"built_in\">Double</span>,</span><br><span class=\"line\">    <span class=\"keyword\">val</span> lastModifiedAt: String</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Building-the-UI-with-Kweb\"><a href=\"#Building-the-UI-with-Kweb\" class=\"headerlink\" title=\"Building the UI with Kweb\"></a>Building the UI with Kweb</h2><p>Once done, I got cracking on the UI interface. I wanted something quick and simple, crude even, just to demonstrate that it all works as proposed. So I setup a container with some form fields, a search button and a table to input the S3 region link and the name of the bucket. </p>\n<p>I also needed a table to display all the keys (sans pagination, who builds pagination in PoCs anyway? 🤠). To enable holding the data, I used something called <a href=\"https://github.com/kwebio/kweb-core/blob/master/src/main/kotlin/io/kweb/state/KVar.kt\" target=\"_blank\" rel=\"noopener\">KVAR</a> which is simply a state store used by Kweb to support propagating state changes to the web app via <a href=\"https://en.wikipedia.org/wiki/Observer_pattern\" target=\"_blank\" rel=\"noopener\">Observer Pattern</a>. </p>\n<p>The following code fragment gets the initialises the S3 data Kvar (setup as an empty list initially) - which eventually propagates it to the table:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div(fomantic.ui.main.container).new &#123;</span><br><span class=\"line\">    div(fomantic.ui.vertical.segment).new &#123;</span><br><span class=\"line\">        div(fomantic.ui.header).text(<span class=\"string\">\"Welcome to S3 Browser 💻\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> keyData = KVar(emptyList&lt;S3Data&gt;())</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">val</span> loader = div(mapOf(<span class=\"string\">\"class\"</span> to <span class=\"string\">\"ui active text loader\"</span>)).addText(<span class=\"string\">\"Retrieving keys...\"</span>)</span><br><span class=\"line\">    loader.setAttribute(<span class=\"string\">\"class\"</span>, <span class=\"string\">\"ui disabled text loader\"</span>)</span><br><span class=\"line\">    createInputSegment(loader, keyData)</span><br><span class=\"line\">    createKeysTable(keyData)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Now, here is where Kwebs deep integration with kotlin really comes in handy, since it allows us to use <a href=\"https://kotlinlang.org/docs/reference/coroutines-overview.html\" target=\"_blank\" rel=\"noopener\">kotlin coroutines</a> to handle tasks with considerable i/o (such as retrieving data from an AWS bucket). I have recently started using coroutines frequently in production code and I can without doubt say they’re the best way to write asynchronous tasks without worrying about threads. The low touch syntax setup and the results are so easy it almost feels like cheating.</p>\n<p>The following code fragment uses the <code>S3Client</code> introduced earlier to launch a coroutine and when the user hits the search button, and displays a loading icon until all the data is retrieved or an error is thrown:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> ElementCreator<span class=\"type\">&lt;DivElement&gt;</span>.<span class=\"title\">createInputSegment</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    loader: <span class=\"type\">Element</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    keyData: <span class=\"type\">KVar</span>&lt;<span class=\"type\">List</span>&lt;<span class=\"type\">S3Data</span>&gt;&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">)</span></span> &#123;</span><br><span class=\"line\">    div(fomantic.ui.vertical.segment).new &#123;</span><br><span class=\"line\">        div(fomantic.ui.input).new &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> endpointInput = input(type = InputType.text, placeholder = <span class=\"string\">\"Enter S3 Endpoint Url\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">val</span> bucketInput = input(type = InputType.text, placeholder = <span class=\"string\">\"Enter S3 Bucket Name\"</span>)</span><br><span class=\"line\">            button(mapOf(<span class=\"string\">\"class\"</span> to <span class=\"string\">\"ui primary button\"</span>)).text(<span class=\"string\">\"Search\"</span>).on.click &#123;</span><br><span class=\"line\">                GlobalScope.launch &#123;</span><br><span class=\"line\">                    loader.setAttribute(<span class=\"string\">\"class\"</span>, <span class=\"string\">\"ui active text loader\"</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">val</span> s3Client =</span><br><span class=\"line\">                        S3Client(endpointInput.getValue().await(), bucketInput.getValue().await())</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        keyData.value = s3Client.listAllKeys()</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (ex: Exception) &#123;</span><br><span class=\"line\">                        p().execute(ERROR_TOAST)</span><br><span class=\"line\">                        loader.setAttribute(<span class=\"string\">\"class\"</span>, <span class=\"string\">\"ui disabled text loader\"</span>)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (keyData.value.isNotEmpty()) &#123;</span><br><span class=\"line\">                        p().execute(SUCCESS_TOAST)</span><br><span class=\"line\">                        loader.setAttribute(<span class=\"string\">\"class\"</span>, <span class=\"string\">\"ui disabled text loader\"</span>)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>So far so good, now that we have successfully pulled in the data in out Kvar container, we can start rendering a table. Now I also wanted to show a nice little icon to show that the retrieved object was a file - and also allow the ability to click name of the key as a link so the user can download.</p>\n<p>Now Kweb as far as I could tell didn’t have the ability to specify that via a DSL object, however, it does provide the ability to specify nested HTML inside a table element to add my own custom behaviour. </p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> ElementCreator<span class=\"type\">&lt;DivElement&gt;</span>.<span class=\"title\">createKeysTable</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    keyData: <span class=\"type\">KVar</span>&lt;<span class=\"type\">List</span>&lt;<span class=\"type\">S3Data</span>&gt;&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">)</span></span> &#123;</span><br><span class=\"line\">    table(mapOf(<span class=\"string\">\"class\"</span> to <span class=\"string\">\"ui celled striped table\"</span>)).new &#123;</span><br><span class=\"line\">        thead().new &#123;</span><br><span class=\"line\">            tr().new &#123;</span><br><span class=\"line\">                th().text(<span class=\"string\">\"Key\"</span>)</span><br><span class=\"line\">                th().text(<span class=\"string\">\"File Size (in KB)\"</span>)</span><br><span class=\"line\">                th().text(<span class=\"string\">\"Last Modified At\"</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tbody().new &#123;</span><br><span class=\"line\">            keyData.map &#123;</span><br><span class=\"line\">                it.forEach &#123;</span><br><span class=\"line\">                    tr().new &#123;</span><br><span class=\"line\">                        td(mapOf(<span class=\"string\">\"data-lable\"</span> to <span class=\"string\">\"Key\"</span>)).innerHTML(<span class=\"string\">\"&lt;i class=\\\"file outline icon\\\"&gt;&lt;/i&gt; &lt;a target=\\\"_blank\\\" href=<span class=\"subst\">$&#123;it.downloadUrl&#125;</span> download=<span class=\"subst\">$&#123;it.key&#125;</span>&gt;<span class=\"subst\">$&#123;it.key&#125;</span>&lt;/a&gt;\"</span>)</span><br><span class=\"line\">                        td(mapOf(<span class=\"string\">\"data-lable\"</span> to <span class=\"string\">\"File Size\"</span>)).text(<span class=\"string\">\"<span class=\"subst\">$&#123;it.size&#125;</span> KB\"</span>)</span><br><span class=\"line\">                        td(mapOf(<span class=\"string\">\"data-lable\"</span> to <span class=\"string\">\"Last Modified At\"</span>)).text(it.lastModifiedAt)</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The code above creates a new table and generates a new row in the table for each public key present in the provided bucket. If no data is present, nothing gets rendered. </p>\n<p>This probably also the time to give a shoutout to the Kweb creators for an integration with <a href=\"https://fomantic-ui.com/\" target=\"_blank\" rel=\"noopener\">Fomantic UI</a> which comes pre-configured with nice UI elements. Although, the integration doesn’t end there and there is a nice APi for anyone to write a new plugin with their favourite UI elements library. </p>\n<h2 id=\"Final-Notes\"><a href=\"#Final-Notes\" class=\"headerlink\" title=\"Final Notes\"></a>Final Notes</h2><p>And that is all that’s needed to write a simple S3 browsing web app using Kweb. <a href=\"https://secure-scrubland-34237.herokuapp.com/\" target=\"_blank\" rel=\"noopener\">Here</a> is the app deployed on heroku and the full working code is on <a href=\"https://github.com/shavz/Bows3r\" target=\"_blank\" rel=\"noopener\">github</a>. </p>\n<p>Gif Demo:</p>\n<p><img src=\"https://imgur.com/YoJdUxj.gif\" alt></p>\n<p>Youtube Demo:</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/0soMtA2vUSo\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n"},{"title":"Software Engineering Levels","date":"2020-01-02T10:49:32.000Z","_content":"\nFor many software engineers, SE job titles hold a special place. No other topic elicits a more passionate response than when an engineer thinks that their ranking in the pecking order is threatened by an unworthy usurper in their company. The pattern is the same, whether it be a 1000+ tech drone corporate or small tight-knit startup. \n\nAlthough initially used to define various steps in the career ladder <sup><a href=\"https://www.coderhood.com/software-engineering-job-titles/\">1</a></sup> which meant more prestige from the colleagues and more importantly, better compensation from the employer - the ranks have warped into a pissing contest between new developers in the industry. The way I like to look at it is that the ranks are purely indicative of the level of impact, and the breadth of responsibility that any engineering individual in the company has. Unlike popular opinion, I don't think it's necessarily tied to experience either - I have seen engineers with < 2 years of experience handling complex architectural problems and conversely seen someone with > 10 years of experience in the industry struggling with basic programming concepts. There's also the matter of company size, a mid level at a large company might be a senior at a small company and vice versa. The career progression paths are different in every company and where you might lie based on that should also be taken into account.\n\n\n![](SE%20Levels.jpg)\n\n\nFor someone who has been coding since the age of 13 and has had various jobs at different levels in a professional setting for the past five years, I felt like now was the time to put in writing my thoughts on what constitutes developers at various levels. It is worth noting however that whatever you read here isn't definitive, and as always factors outside of technical and soft skills should be taken into account. \n\n\n### Junior Software Engineers\n\nThis is someone who's just tasted the wonderful life of what it means to make machines do mans bidding. More often than not, people that are put in this category are either fresh out of university with a degree that had some programming background or have just graduated from an academy, or an institute specializing in teaching people how to code.\n\nIn my opinion, such candidates are the lifeblood of any organisation, and they should be given space, time and most importantly mentorship, to grow. Usually the expectations for people in this role are:\n\n- **Write code.** As simple as that. As a junior, the expectations are not multi dimensional, and the company would thank you for just writing code and getting s*&$ done! You might be good at leetcode and blazingly fast at writing linkedlist implementations, but if you can't write proper javascript and css as a frontend engineer, you're already on a sinking ship. \n\n- **Network and be open to feedback.** Perhaps the most important skill of them all when you're just starting is to always be open to feedback from peers, whether it be via pull requests submitted at work or via a mentorship sessions with someone with a bit more experience. Another important professional goal should be to network with as many people as possible within the industry. This can involve going to meetups, tech fairs, conferences, hackathons etc. Programming by nature attracts social recluses, so going to events like this can provide a safe environment to meet new people in the industry without the undue pressure of an alternative social setting.\n  \n- **Learn various auxiliary system.** Professional programming isn't simply writing code, it involves using version control systems, dealing with frameworks, reading APIs and reasoning about the system from them, working with databases etc. No one would expect you to be an expert in these systems, but knowing your way around it is almost essential part of the role. Fortunately, any good company will be willing to spend time and mentorship hours to coach you on any of those topics if you'ev never done them before.\n\n- **Fundamentals and algorithms are good, but pick a modern framework (and if possible, stick with itΩ).** As the saying goes, frameworks come and go, but the logic never changes (okay yes, I just made that up). It's hardly a secret that there always seems to be a new framework to achieve a result, this is especially true of frontend - but it's worth investing and picking up one of the popular framework to gain deep knowledge in, especially for juniors. I picked up VueJs and Spring boot as my front end and backend frameworks of choice and have never looked back. It was one of the best decisions I made as a junior.\n\n### Mid level Software Engineer\n\nThese are the underdogs of any dev shop. Almost always underappreciated but are the ones making sure the product guys are happy with the sprint velocity. Humor aside, mid level engineers ensure the rhythmic hum of new features being churned and priority bugs being squashed withing the organisation. The people that fit in this role usually have following expectations:\n\n- **Working autonomously or with minimal direction.** A solid mid level engineer, after an initial period of acclimatisation is in tune with the product that the company is selling is able to pick up technically challenging or unassigned work without little to no effort. They may still require some guidance here and there, but for the most part the company, and their peers can be confident that they will always deliver on their assigned work.  \n\n- **Mentoring or showing the ropes to juniors**. Often companies will expect mid level engineers to be showing the ropes to interns and junior software engineers - this can mean many things, however, usually involves pairing with them through onboarding and making sure onboarding docs are up to date, guiding them on fixing issues with individual components and generally being a validation checkpoint for their development queries.\n\n- **Comfortable in making component and micro level architectural decisions.** This part of mid level engineer roles, overlaps with a senior engineer/solution architects role. As a mid level engineer you're also expected autonomously make micro level code and drive technical decisions withing a small 2-3 team pod. Quite frankly, most companies won't expect it but in my opinion if someone is truly looking to breach into the senior engineer and then perhaps technical leadership ladder this is an essential skill.\n\n### Senior Software Engineers\n\nPeople in these positions are usually regarded as the influencers and drivers of technical direction in a given stack/project domain for the company. Routine expectations for people in such roles are:\n\n- **Deep knowledge of their stack and company's product domain.** Senior engineers are usually expected to be the go to authority on complex technical questions and architectural design decisions. They're expected to know their technical domain very well, including any quirks, and are expected to use that knowledge to solve complex product and build challenges.\n\n- **Technical stewardship.** Most companies expect senior engineers to be the stewards of their chosen tech stack. This can manifest in various ways, for example, some are champions of their industry and are regularly given talks about a particualr programming concept or tool. Others, tend to do things more privately and are consistently experimenting with better and sm,arter way to build systems and improve business outcomes within the company. This requires people in senior engineering position to be constantly updating their skills.\n\n- **Long term focus.** This probably the most underappreciated part of a senior engineers roles, but which I think is what really differentiates a true senior engineer from the lot. A senior engineer is expected to always priortise mainitainibility/extensibility over everything. This is part of their programming DNA, and this is what allows them to dismiss the new fancy framework of the season, or the next <pick a programming language>-killer. \n\n\n### Communication\n\nCommunication is such an essential skill for engineers at all levels, so I decided to dedicate a whole section to it. Good communication skills are hard to quantify but very easy to identify. More often than not, technical and project management, inside a company would rather have engineers that can communicate but produce marginally less output over engineers that are rockstars but lack the desired communication skills. This is not universal, but it is definitely the trend.\n\nFor entry level/junior engineers it's important to be to consistently ask for feedback and articulate why the code they added/changed was done in the way it did. \n\nFor mid level engineers, it's important to be able communicate with juniors on the team as well as be able to document design decisions made over the course of delivering product features.\n\nFor senior engineers and above it is even more critical, as a big part of their job is to communicate their ideas and have them percolate through various teams inside the development org.  \n\n\n### Why leave the rest\n\nI understand that an engineering org can, and mostly is, made up of other varieties of engineers such as intern or graduante/entry level engineers, technical analysts, software architects, tech leads, devops ninja etc etc. This is post is not aimed at them and sometimes a lot of their skills will overlap with developers. I might do a follow up post in the future that targets people working in cross-cutting development roles.\n\n\n\n#### References\n1. [Software Engineering Job Titles](https://www.coderhood.com/software-engineering-job-titles/)\n2. [On Being A Senior Engineer](https://www.kitchensoap.com/2012/10/25/on-being-a-senior-engineer/)\n","source":"_posts/Junior-vs-Mid-vs-Senior-Software-Engineer.md","raw":"---\ntitle: Software Engineering Levels\ndate: 2020-01-02 21:49:32\ntags: \n- software\n- general\n- skills\n---\n\nFor many software engineers, SE job titles hold a special place. No other topic elicits a more passionate response than when an engineer thinks that their ranking in the pecking order is threatened by an unworthy usurper in their company. The pattern is the same, whether it be a 1000+ tech drone corporate or small tight-knit startup. \n\nAlthough initially used to define various steps in the career ladder <sup><a href=\"https://www.coderhood.com/software-engineering-job-titles/\">1</a></sup> which meant more prestige from the colleagues and more importantly, better compensation from the employer - the ranks have warped into a pissing contest between new developers in the industry. The way I like to look at it is that the ranks are purely indicative of the level of impact, and the breadth of responsibility that any engineering individual in the company has. Unlike popular opinion, I don't think it's necessarily tied to experience either - I have seen engineers with < 2 years of experience handling complex architectural problems and conversely seen someone with > 10 years of experience in the industry struggling with basic programming concepts. There's also the matter of company size, a mid level at a large company might be a senior at a small company and vice versa. The career progression paths are different in every company and where you might lie based on that should also be taken into account.\n\n\n![](SE%20Levels.jpg)\n\n\nFor someone who has been coding since the age of 13 and has had various jobs at different levels in a professional setting for the past five years, I felt like now was the time to put in writing my thoughts on what constitutes developers at various levels. It is worth noting however that whatever you read here isn't definitive, and as always factors outside of technical and soft skills should be taken into account. \n\n\n### Junior Software Engineers\n\nThis is someone who's just tasted the wonderful life of what it means to make machines do mans bidding. More often than not, people that are put in this category are either fresh out of university with a degree that had some programming background or have just graduated from an academy, or an institute specializing in teaching people how to code.\n\nIn my opinion, such candidates are the lifeblood of any organisation, and they should be given space, time and most importantly mentorship, to grow. Usually the expectations for people in this role are:\n\n- **Write code.** As simple as that. As a junior, the expectations are not multi dimensional, and the company would thank you for just writing code and getting s*&$ done! You might be good at leetcode and blazingly fast at writing linkedlist implementations, but if you can't write proper javascript and css as a frontend engineer, you're already on a sinking ship. \n\n- **Network and be open to feedback.** Perhaps the most important skill of them all when you're just starting is to always be open to feedback from peers, whether it be via pull requests submitted at work or via a mentorship sessions with someone with a bit more experience. Another important professional goal should be to network with as many people as possible within the industry. This can involve going to meetups, tech fairs, conferences, hackathons etc. Programming by nature attracts social recluses, so going to events like this can provide a safe environment to meet new people in the industry without the undue pressure of an alternative social setting.\n  \n- **Learn various auxiliary system.** Professional programming isn't simply writing code, it involves using version control systems, dealing with frameworks, reading APIs and reasoning about the system from them, working with databases etc. No one would expect you to be an expert in these systems, but knowing your way around it is almost essential part of the role. Fortunately, any good company will be willing to spend time and mentorship hours to coach you on any of those topics if you'ev never done them before.\n\n- **Fundamentals and algorithms are good, but pick a modern framework (and if possible, stick with itΩ).** As the saying goes, frameworks come and go, but the logic never changes (okay yes, I just made that up). It's hardly a secret that there always seems to be a new framework to achieve a result, this is especially true of frontend - but it's worth investing and picking up one of the popular framework to gain deep knowledge in, especially for juniors. I picked up VueJs and Spring boot as my front end and backend frameworks of choice and have never looked back. It was one of the best decisions I made as a junior.\n\n### Mid level Software Engineer\n\nThese are the underdogs of any dev shop. Almost always underappreciated but are the ones making sure the product guys are happy with the sprint velocity. Humor aside, mid level engineers ensure the rhythmic hum of new features being churned and priority bugs being squashed withing the organisation. The people that fit in this role usually have following expectations:\n\n- **Working autonomously or with minimal direction.** A solid mid level engineer, after an initial period of acclimatisation is in tune with the product that the company is selling is able to pick up technically challenging or unassigned work without little to no effort. They may still require some guidance here and there, but for the most part the company, and their peers can be confident that they will always deliver on their assigned work.  \n\n- **Mentoring or showing the ropes to juniors**. Often companies will expect mid level engineers to be showing the ropes to interns and junior software engineers - this can mean many things, however, usually involves pairing with them through onboarding and making sure onboarding docs are up to date, guiding them on fixing issues with individual components and generally being a validation checkpoint for their development queries.\n\n- **Comfortable in making component and micro level architectural decisions.** This part of mid level engineer roles, overlaps with a senior engineer/solution architects role. As a mid level engineer you're also expected autonomously make micro level code and drive technical decisions withing a small 2-3 team pod. Quite frankly, most companies won't expect it but in my opinion if someone is truly looking to breach into the senior engineer and then perhaps technical leadership ladder this is an essential skill.\n\n### Senior Software Engineers\n\nPeople in these positions are usually regarded as the influencers and drivers of technical direction in a given stack/project domain for the company. Routine expectations for people in such roles are:\n\n- **Deep knowledge of their stack and company's product domain.** Senior engineers are usually expected to be the go to authority on complex technical questions and architectural design decisions. They're expected to know their technical domain very well, including any quirks, and are expected to use that knowledge to solve complex product and build challenges.\n\n- **Technical stewardship.** Most companies expect senior engineers to be the stewards of their chosen tech stack. This can manifest in various ways, for example, some are champions of their industry and are regularly given talks about a particualr programming concept or tool. Others, tend to do things more privately and are consistently experimenting with better and sm,arter way to build systems and improve business outcomes within the company. This requires people in senior engineering position to be constantly updating their skills.\n\n- **Long term focus.** This probably the most underappreciated part of a senior engineers roles, but which I think is what really differentiates a true senior engineer from the lot. A senior engineer is expected to always priortise mainitainibility/extensibility over everything. This is part of their programming DNA, and this is what allows them to dismiss the new fancy framework of the season, or the next <pick a programming language>-killer. \n\n\n### Communication\n\nCommunication is such an essential skill for engineers at all levels, so I decided to dedicate a whole section to it. Good communication skills are hard to quantify but very easy to identify. More often than not, technical and project management, inside a company would rather have engineers that can communicate but produce marginally less output over engineers that are rockstars but lack the desired communication skills. This is not universal, but it is definitely the trend.\n\nFor entry level/junior engineers it's important to be to consistently ask for feedback and articulate why the code they added/changed was done in the way it did. \n\nFor mid level engineers, it's important to be able communicate with juniors on the team as well as be able to document design decisions made over the course of delivering product features.\n\nFor senior engineers and above it is even more critical, as a big part of their job is to communicate their ideas and have them percolate through various teams inside the development org.  \n\n\n### Why leave the rest\n\nI understand that an engineering org can, and mostly is, made up of other varieties of engineers such as intern or graduante/entry level engineers, technical analysts, software architects, tech leads, devops ninja etc etc. This is post is not aimed at them and sometimes a lot of their skills will overlap with developers. I might do a follow up post in the future that targets people working in cross-cutting development roles.\n\n\n\n#### References\n1. [Software Engineering Job Titles](https://www.coderhood.com/software-engineering-job-titles/)\n2. [On Being A Senior Engineer](https://www.kitchensoap.com/2012/10/25/on-being-a-senior-engineer/)\n","slug":"Junior-vs-Mid-vs-Senior-Software-Engineer","published":1,"updated":"2020-01-05T01:10:52.663Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck50cg3vf001ba4efvtpzlwb1","content":"<p>For many software engineers, SE job titles hold a special place. No other topic elicits a more passionate response than when an engineer thinks that their ranking in the pecking order is threatened by an unworthy usurper in their company. The pattern is the same, whether it be a 1000+ tech drone corporate or small tight-knit startup. </p>\n<p>Although initially used to define various steps in the career ladder <sup><a href=\"https://www.coderhood.com/software-engineering-job-titles/\" target=\"_blank\" rel=\"noopener\">1</a></sup> which meant more prestige from the colleagues and more importantly, better compensation from the employer - the ranks have warped into a pissing contest between new developers in the industry. The way I like to look at it is that the ranks are purely indicative of the level of impact, and the breadth of responsibility that any engineering individual in the company has. Unlike popular opinion, I don’t think it’s necessarily tied to experience either - I have seen engineers with &lt; 2 years of experience handling complex architectural problems and conversely seen someone with &gt; 10 years of experience in the industry struggling with basic programming concepts. There’s also the matter of company size, a mid level at a large company might be a senior at a small company and vice versa. The career progression paths are different in every company and where you might lie based on that should also be taken into account.</p>\n<p><img src=\"SE%20Levels.jpg\" alt></p>\n<p>For someone who has been coding since the age of 13 and has had various jobs at different levels in a professional setting for the past five years, I felt like now was the time to put in writing my thoughts on what constitutes developers at various levels. It is worth noting however that whatever you read here isn’t definitive, and as always factors outside of technical and soft skills should be taken into account. </p>\n<h3 id=\"Junior-Software-Engineers\"><a href=\"#Junior-Software-Engineers\" class=\"headerlink\" title=\"Junior Software Engineers\"></a>Junior Software Engineers</h3><p>This is someone who’s just tasted the wonderful life of what it means to make machines do mans bidding. More often than not, people that are put in this category are either fresh out of university with a degree that had some programming background or have just graduated from an academy, or an institute specializing in teaching people how to code.</p>\n<p>In my opinion, such candidates are the lifeblood of any organisation, and they should be given space, time and most importantly mentorship, to grow. Usually the expectations for people in this role are:</p>\n<ul>\n<li><p><strong>Write code.</strong> As simple as that. As a junior, the expectations are not multi dimensional, and the company would thank you for just writing code and getting s*&amp;$ done! You might be good at leetcode and blazingly fast at writing linkedlist implementations, but if you can’t write proper javascript and css as a frontend engineer, you’re already on a sinking ship. </p>\n</li>\n<li><p><strong>Network and be open to feedback.</strong> Perhaps the most important skill of them all when you’re just starting is to always be open to feedback from peers, whether it be via pull requests submitted at work or via a mentorship sessions with someone with a bit more experience. Another important professional goal should be to network with as many people as possible within the industry. This can involve going to meetups, tech fairs, conferences, hackathons etc. Programming by nature attracts social recluses, so going to events like this can provide a safe environment to meet new people in the industry without the undue pressure of an alternative social setting.</p>\n</li>\n<li><p><strong>Learn various auxiliary system.</strong> Professional programming isn’t simply writing code, it involves using version control systems, dealing with frameworks, reading APIs and reasoning about the system from them, working with databases etc. No one would expect you to be an expert in these systems, but knowing your way around it is almost essential part of the role. Fortunately, any good company will be willing to spend time and mentorship hours to coach you on any of those topics if you’ev never done them before.</p>\n</li>\n<li><p><strong>Fundamentals and algorithms are good, but pick a modern framework (and if possible, stick with itΩ).</strong> As the saying goes, frameworks come and go, but the logic never changes (okay yes, I just made that up). It’s hardly a secret that there always seems to be a new framework to achieve a result, this is especially true of frontend - but it’s worth investing and picking up one of the popular framework to gain deep knowledge in, especially for juniors. I picked up VueJs and Spring boot as my front end and backend frameworks of choice and have never looked back. It was one of the best decisions I made as a junior.</p>\n</li>\n</ul>\n<h3 id=\"Mid-level-Software-Engineer\"><a href=\"#Mid-level-Software-Engineer\" class=\"headerlink\" title=\"Mid level Software Engineer\"></a>Mid level Software Engineer</h3><p>These are the underdogs of any dev shop. Almost always underappreciated but are the ones making sure the product guys are happy with the sprint velocity. Humor aside, mid level engineers ensure the rhythmic hum of new features being churned and priority bugs being squashed withing the organisation. The people that fit in this role usually have following expectations:</p>\n<ul>\n<li><p><strong>Working autonomously or with minimal direction.</strong> A solid mid level engineer, after an initial period of acclimatisation is in tune with the product that the company is selling is able to pick up technically challenging or unassigned work without little to no effort. They may still require some guidance here and there, but for the most part the company, and their peers can be confident that they will always deliver on their assigned work.  </p>\n</li>\n<li><p><strong>Mentoring or showing the ropes to juniors</strong>. Often companies will expect mid level engineers to be showing the ropes to interns and junior software engineers - this can mean many things, however, usually involves pairing with them through onboarding and making sure onboarding docs are up to date, guiding them on fixing issues with individual components and generally being a validation checkpoint for their development queries.</p>\n</li>\n<li><p><strong>Comfortable in making component and micro level architectural decisions.</strong> This part of mid level engineer roles, overlaps with a senior engineer/solution architects role. As a mid level engineer you’re also expected autonomously make micro level code and drive technical decisions withing a small 2-3 team pod. Quite frankly, most companies won’t expect it but in my opinion if someone is truly looking to breach into the senior engineer and then perhaps technical leadership ladder this is an essential skill.</p>\n</li>\n</ul>\n<h3 id=\"Senior-Software-Engineers\"><a href=\"#Senior-Software-Engineers\" class=\"headerlink\" title=\"Senior Software Engineers\"></a>Senior Software Engineers</h3><p>People in these positions are usually regarded as the influencers and drivers of technical direction in a given stack/project domain for the company. Routine expectations for people in such roles are:</p>\n<ul>\n<li><p><strong>Deep knowledge of their stack and company’s product domain.</strong> Senior engineers are usually expected to be the go to authority on complex technical questions and architectural design decisions. They’re expected to know their technical domain very well, including any quirks, and are expected to use that knowledge to solve complex product and build challenges.</p>\n</li>\n<li><p><strong>Technical stewardship.</strong> Most companies expect senior engineers to be the stewards of their chosen tech stack. This can manifest in various ways, for example, some are champions of their industry and are regularly given talks about a particualr programming concept or tool. Others, tend to do things more privately and are consistently experimenting with better and sm,arter way to build systems and improve business outcomes within the company. This requires people in senior engineering position to be constantly updating their skills.</p>\n</li>\n<li><p><strong>Long term focus.</strong> This probably the most underappreciated part of a senior engineers roles, but which I think is what really differentiates a true senior engineer from the lot. A senior engineer is expected to always priortise mainitainibility/extensibility over everything. This is part of their programming DNA, and this is what allows them to dismiss the new fancy framework of the season, or the next <pick a programming language>-killer. </pick></p>\n</li>\n</ul>\n<h3 id=\"Communication\"><a href=\"#Communication\" class=\"headerlink\" title=\"Communication\"></a>Communication</h3><p>Communication is such an essential skill for engineers at all levels, so I decided to dedicate a whole section to it. Good communication skills are hard to quantify but very easy to identify. More often than not, technical and project management, inside a company would rather have engineers that can communicate but produce marginally less output over engineers that are rockstars but lack the desired communication skills. This is not universal, but it is definitely the trend.</p>\n<p>For entry level/junior engineers it’s important to be to consistently ask for feedback and articulate why the code they added/changed was done in the way it did. </p>\n<p>For mid level engineers, it’s important to be able communicate with juniors on the team as well as be able to document design decisions made over the course of delivering product features.</p>\n<p>For senior engineers and above it is even more critical, as a big part of their job is to communicate their ideas and have them percolate through various teams inside the development org.  </p>\n<h3 id=\"Why-leave-the-rest\"><a href=\"#Why-leave-the-rest\" class=\"headerlink\" title=\"Why leave the rest\"></a>Why leave the rest</h3><p>I understand that an engineering org can, and mostly is, made up of other varieties of engineers such as intern or graduante/entry level engineers, technical analysts, software architects, tech leads, devops ninja etc etc. This is post is not aimed at them and sometimes a lot of their skills will overlap with developers. I might do a follow up post in the future that targets people working in cross-cutting development roles.</p>\n<h4 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h4><ol>\n<li><a href=\"https://www.coderhood.com/software-engineering-job-titles/\" target=\"_blank\" rel=\"noopener\">Software Engineering Job Titles</a></li>\n<li><a href=\"https://www.kitchensoap.com/2012/10/25/on-being-a-senior-engineer/\" target=\"_blank\" rel=\"noopener\">On Being A Senior Engineer</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>For many software engineers, SE job titles hold a special place. No other topic elicits a more passionate response than when an engineer thinks that their ranking in the pecking order is threatened by an unworthy usurper in their company. The pattern is the same, whether it be a 1000+ tech drone corporate or small tight-knit startup. </p>\n<p>Although initially used to define various steps in the career ladder <sup><a href=\"https://www.coderhood.com/software-engineering-job-titles/\" target=\"_blank\" rel=\"noopener\">1</a></sup> which meant more prestige from the colleagues and more importantly, better compensation from the employer - the ranks have warped into a pissing contest between new developers in the industry. The way I like to look at it is that the ranks are purely indicative of the level of impact, and the breadth of responsibility that any engineering individual in the company has. Unlike popular opinion, I don’t think it’s necessarily tied to experience either - I have seen engineers with &lt; 2 years of experience handling complex architectural problems and conversely seen someone with &gt; 10 years of experience in the industry struggling with basic programming concepts. There’s also the matter of company size, a mid level at a large company might be a senior at a small company and vice versa. The career progression paths are different in every company and where you might lie based on that should also be taken into account.</p>\n<p><img src=\"SE%20Levels.jpg\" alt></p>\n<p>For someone who has been coding since the age of 13 and has had various jobs at different levels in a professional setting for the past five years, I felt like now was the time to put in writing my thoughts on what constitutes developers at various levels. It is worth noting however that whatever you read here isn’t definitive, and as always factors outside of technical and soft skills should be taken into account. </p>\n<h3 id=\"Junior-Software-Engineers\"><a href=\"#Junior-Software-Engineers\" class=\"headerlink\" title=\"Junior Software Engineers\"></a>Junior Software Engineers</h3><p>This is someone who’s just tasted the wonderful life of what it means to make machines do mans bidding. More often than not, people that are put in this category are either fresh out of university with a degree that had some programming background or have just graduated from an academy, or an institute specializing in teaching people how to code.</p>\n<p>In my opinion, such candidates are the lifeblood of any organisation, and they should be given space, time and most importantly mentorship, to grow. Usually the expectations for people in this role are:</p>\n<ul>\n<li><p><strong>Write code.</strong> As simple as that. As a junior, the expectations are not multi dimensional, and the company would thank you for just writing code and getting s*&amp;$ done! You might be good at leetcode and blazingly fast at writing linkedlist implementations, but if you can’t write proper javascript and css as a frontend engineer, you’re already on a sinking ship. </p>\n</li>\n<li><p><strong>Network and be open to feedback.</strong> Perhaps the most important skill of them all when you’re just starting is to always be open to feedback from peers, whether it be via pull requests submitted at work or via a mentorship sessions with someone with a bit more experience. Another important professional goal should be to network with as many people as possible within the industry. This can involve going to meetups, tech fairs, conferences, hackathons etc. Programming by nature attracts social recluses, so going to events like this can provide a safe environment to meet new people in the industry without the undue pressure of an alternative social setting.</p>\n</li>\n<li><p><strong>Learn various auxiliary system.</strong> Professional programming isn’t simply writing code, it involves using version control systems, dealing with frameworks, reading APIs and reasoning about the system from them, working with databases etc. No one would expect you to be an expert in these systems, but knowing your way around it is almost essential part of the role. Fortunately, any good company will be willing to spend time and mentorship hours to coach you on any of those topics if you’ev never done them before.</p>\n</li>\n<li><p><strong>Fundamentals and algorithms are good, but pick a modern framework (and if possible, stick with itΩ).</strong> As the saying goes, frameworks come and go, but the logic never changes (okay yes, I just made that up). It’s hardly a secret that there always seems to be a new framework to achieve a result, this is especially true of frontend - but it’s worth investing and picking up one of the popular framework to gain deep knowledge in, especially for juniors. I picked up VueJs and Spring boot as my front end and backend frameworks of choice and have never looked back. It was one of the best decisions I made as a junior.</p>\n</li>\n</ul>\n<h3 id=\"Mid-level-Software-Engineer\"><a href=\"#Mid-level-Software-Engineer\" class=\"headerlink\" title=\"Mid level Software Engineer\"></a>Mid level Software Engineer</h3><p>These are the underdogs of any dev shop. Almost always underappreciated but are the ones making sure the product guys are happy with the sprint velocity. Humor aside, mid level engineers ensure the rhythmic hum of new features being churned and priority bugs being squashed withing the organisation. The people that fit in this role usually have following expectations:</p>\n<ul>\n<li><p><strong>Working autonomously or with minimal direction.</strong> A solid mid level engineer, after an initial period of acclimatisation is in tune with the product that the company is selling is able to pick up technically challenging or unassigned work without little to no effort. They may still require some guidance here and there, but for the most part the company, and their peers can be confident that they will always deliver on their assigned work.  </p>\n</li>\n<li><p><strong>Mentoring or showing the ropes to juniors</strong>. Often companies will expect mid level engineers to be showing the ropes to interns and junior software engineers - this can mean many things, however, usually involves pairing with them through onboarding and making sure onboarding docs are up to date, guiding them on fixing issues with individual components and generally being a validation checkpoint for their development queries.</p>\n</li>\n<li><p><strong>Comfortable in making component and micro level architectural decisions.</strong> This part of mid level engineer roles, overlaps with a senior engineer/solution architects role. As a mid level engineer you’re also expected autonomously make micro level code and drive technical decisions withing a small 2-3 team pod. Quite frankly, most companies won’t expect it but in my opinion if someone is truly looking to breach into the senior engineer and then perhaps technical leadership ladder this is an essential skill.</p>\n</li>\n</ul>\n<h3 id=\"Senior-Software-Engineers\"><a href=\"#Senior-Software-Engineers\" class=\"headerlink\" title=\"Senior Software Engineers\"></a>Senior Software Engineers</h3><p>People in these positions are usually regarded as the influencers and drivers of technical direction in a given stack/project domain for the company. Routine expectations for people in such roles are:</p>\n<ul>\n<li><p><strong>Deep knowledge of their stack and company’s product domain.</strong> Senior engineers are usually expected to be the go to authority on complex technical questions and architectural design decisions. They’re expected to know their technical domain very well, including any quirks, and are expected to use that knowledge to solve complex product and build challenges.</p>\n</li>\n<li><p><strong>Technical stewardship.</strong> Most companies expect senior engineers to be the stewards of their chosen tech stack. This can manifest in various ways, for example, some are champions of their industry and are regularly given talks about a particualr programming concept or tool. Others, tend to do things more privately and are consistently experimenting with better and sm,arter way to build systems and improve business outcomes within the company. This requires people in senior engineering position to be constantly updating their skills.</p>\n</li>\n<li><p><strong>Long term focus.</strong> This probably the most underappreciated part of a senior engineers roles, but which I think is what really differentiates a true senior engineer from the lot. A senior engineer is expected to always priortise mainitainibility/extensibility over everything. This is part of their programming DNA, and this is what allows them to dismiss the new fancy framework of the season, or the next <pick a programming language>-killer. </pick></p>\n</li>\n</ul>\n<h3 id=\"Communication\"><a href=\"#Communication\" class=\"headerlink\" title=\"Communication\"></a>Communication</h3><p>Communication is such an essential skill for engineers at all levels, so I decided to dedicate a whole section to it. Good communication skills are hard to quantify but very easy to identify. More often than not, technical and project management, inside a company would rather have engineers that can communicate but produce marginally less output over engineers that are rockstars but lack the desired communication skills. This is not universal, but it is definitely the trend.</p>\n<p>For entry level/junior engineers it’s important to be to consistently ask for feedback and articulate why the code they added/changed was done in the way it did. </p>\n<p>For mid level engineers, it’s important to be able communicate with juniors on the team as well as be able to document design decisions made over the course of delivering product features.</p>\n<p>For senior engineers and above it is even more critical, as a big part of their job is to communicate their ideas and have them percolate through various teams inside the development org.  </p>\n<h3 id=\"Why-leave-the-rest\"><a href=\"#Why-leave-the-rest\" class=\"headerlink\" title=\"Why leave the rest\"></a>Why leave the rest</h3><p>I understand that an engineering org can, and mostly is, made up of other varieties of engineers such as intern or graduante/entry level engineers, technical analysts, software architects, tech leads, devops ninja etc etc. This is post is not aimed at them and sometimes a lot of their skills will overlap with developers. I might do a follow up post in the future that targets people working in cross-cutting development roles.</p>\n<h4 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h4><ol>\n<li><a href=\"https://www.coderhood.com/software-engineering-job-titles/\" target=\"_blank\" rel=\"noopener\">Software Engineering Job Titles</a></li>\n<li><a href=\"https://www.kitchensoap.com/2012/10/25/on-being-a-senior-engineer/\" target=\"_blank\" rel=\"noopener\">On Being A Senior Engineer</a></li>\n</ol>\n"}],"PostAsset":[{"_id":"source/_posts/Junior-vs-Mid-vs-Senior-Software-Engineer/SE Levels.jpg","post":"ck50cg3vf001ba4efvtpzlwb1","slug":"SE Levels.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ck50cg3t50000a4eftv5d0oy3","category_id":"ck50cg3ta0002a4ef2zk29luc","_id":"ck50cg3tc0006a4ef597n7bz7"},{"post_id":"ck50cg3t80001a4efnd1jbkg3","category_id":"ck50cg3tc0004a4ef18t4d7d7","_id":"ck50cg3td0008a4efj25woptm"},{"post_id":"ck50cg3u6000ia4efjzyym0ji","category_id":"ck50cg3tc0004a4ef18t4d7d7","_id":"ck50cg3ub000na4efamqpcuvd"}],"PostTag":[{"post_id":"ck50cg3t50000a4eftv5d0oy3","tag_id":"ck50cg3tb0003a4efhkgpohpa","_id":"ck50cg3td000aa4efkr6w0awt"},{"post_id":"ck50cg3t50000a4eftv5d0oy3","tag_id":"ck50cg3tc0005a4efvud344gp","_id":"ck50cg3td000ba4efv4onst0y"},{"post_id":"ck50cg3t50000a4eftv5d0oy3","tag_id":"ck50cg3td0007a4efmbxto7di","_id":"ck50cg3te000da4efag0s94kg"},{"post_id":"ck50cg3t80001a4efnd1jbkg3","tag_id":"ck50cg3td0009a4efe6o5x42r","_id":"ck50cg3te000ea4ef1v08lrcf"},{"post_id":"ck50cg3t80001a4efnd1jbkg3","tag_id":"ck50cg3tc0005a4efvud344gp","_id":"ck50cg3te000fa4efi373a7j9"},{"post_id":"ck50cg3u6000ia4efjzyym0ji","tag_id":"ck50cg3td0009a4efe6o5x42r","_id":"ck50cg3uh000ta4efppdy1nug"},{"post_id":"ck50cg3u6000ia4efjzyym0ji","tag_id":"ck50cg3ua000la4efe0b3i70m","_id":"ck50cg3uh000ua4eftocq0iuo"},{"post_id":"ck50cg3u6000ia4efjzyym0ji","tag_id":"ck50cg3ub000oa4efpux5pzwl","_id":"ck50cg3ui000va4ef84wm5ahg"},{"post_id":"ck50cg3u6000ia4efjzyym0ji","tag_id":"ck50cg3uc000pa4efz4luk9ze","_id":"ck50cg3ui000wa4efsc08tvp9"},{"post_id":"ck50cg3u6000ia4efjzyym0ji","tag_id":"ck50cg3ud000qa4ef7q8tvlzy","_id":"ck50cg3ui000xa4eflxvgse9g"},{"post_id":"ck50cg3u6000ia4efjzyym0ji","tag_id":"ck50cg3ue000ra4efmi3kv5sb","_id":"ck50cg3ui000ya4ef2s1laekw"},{"post_id":"ck50cg3u6000ia4efjzyym0ji","tag_id":"ck50cg3ue000sa4ef1zjnoewc","_id":"ck50cg3ui000za4ef8ny3thpa"},{"post_id":"ck50cg3uz0010a4efz2fgqmdl","tag_id":"ck50cg3v10011a4efiqabzmde","_id":"ck50cg3v60016a4efzrlf9208"},{"post_id":"ck50cg3uz0010a4efz2fgqmdl","tag_id":"ck50cg3v10012a4eff6n4eg9h","_id":"ck50cg3v60017a4ef9ixodgy3"},{"post_id":"ck50cg3uz0010a4efz2fgqmdl","tag_id":"ck50cg3v20013a4efp90qcwdp","_id":"ck50cg3v60018a4ef8hcd2ibp"},{"post_id":"ck50cg3uz0010a4efz2fgqmdl","tag_id":"ck50cg3v40014a4ef7d62s4z6","_id":"ck50cg3v70019a4ef5d8bvytz"},{"post_id":"ck50cg3uz0010a4efz2fgqmdl","tag_id":"ck50cg3v50015a4efnaiabjyj","_id":"ck50cg3v7001aa4efcxtg72xu"},{"post_id":"ck50cg3vf001ba4efvtpzlwb1","tag_id":"ck50cg3vg001ca4ef3avbvuu3","_id":"ck50cg3vh001fa4efyrj49mtn"},{"post_id":"ck50cg3vf001ba4efvtpzlwb1","tag_id":"ck50cg3vg001da4efljrfqhk4","_id":"ck50cg3vh001ga4efl310pd72"},{"post_id":"ck50cg3vf001ba4efvtpzlwb1","tag_id":"ck50cg3vg001ea4efu2ol33i6","_id":"ck50cg3vh001ha4ef886aqsoj"}],"Tag":[{"name":"http4k","_id":"ck50cg3tb0003a4efhkgpohpa"},{"name":"kotlin","_id":"ck50cg3tc0005a4efvud344gp"},{"name":"oembed","_id":"ck50cg3td0007a4efmbxto7di"},{"name":"springboot","_id":"ck50cg3td0009a4efe6o5x42r"},{"name":"spring","_id":"ck50cg3ua000la4efe0b3i70m"},{"name":"webflux","_id":"ck50cg3ub000oa4efpux5pzwl"},{"name":"multipart","_id":"ck50cg3uc000pa4efz4luk9ze"},{"name":"form","_id":"ck50cg3ud000qa4ef7q8tvlzy"},{"name":"data","_id":"ck50cg3ue000ra4efmi3kv5sb"},{"name":"testing","_id":"ck50cg3ue000sa4ef1zjnoewc"},{"name":"ssr","_id":"ck50cg3v10011a4efiqabzmde"},{"name":"kweb","_id":"ck50cg3v10012a4eff6n4eg9h"},{"name":"server-side-rendering","_id":"ck50cg3v20013a4efp90qcwdp"},{"name":"web-application","_id":"ck50cg3v40014a4ef7d62s4z6"},{"name":"pure-kotlin","_id":"ck50cg3v50015a4efnaiabjyj"},{"name":"software","_id":"ck50cg3vg001ca4ef3avbvuu3"},{"name":"general","_id":"ck50cg3vg001da4efljrfqhk4"},{"name":"skills","_id":"ck50cg3vg001ea4efu2ol33i6"}]}}